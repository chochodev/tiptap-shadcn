{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "basic",
  "type": "registry:block",
  "title": "tiptap basic editor",
  "description": "the tiptap rich text editor with shadcn-ui components",
  "dependencies": [
    "@tiptap/core",
    "@tiptap/extension-color",
    "@tiptap/extension-heading",
    "@tiptap/extension-highlight",
    "@tiptap/extension-image",
    "@tiptap/extension-link",
    "@tiptap/extension-placeholder",
    "@tiptap/extension-subscript",
    "@tiptap/extension-superscript",
    "@tiptap/extension-text-align",
    "@tiptap/extension-text-style",
    "@tiptap/extension-typography",
    "@tiptap/extension-underline",
    "@tiptap/pm",
    "@tiptap/react",
    "@tiptap/starter-kit",
    "class-variance-authority"
  ],
  "registryDependencies": [
    "dropdown-menu",
    "tooltip",
    "scroll-area",
    "popover",
    "separator",
    "dropdown-menu",
    "label",
    "input",
    "drawer",
    "checkbox",
    "separator",
    "command",
    "tabs",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "registry/basic/page.tsx",
      "content": "import { RichTextEditorDemo } from \"@/components/tiptap/rich-text-editor\";\r\n\r\nexport default function Page() {\r\n\r\n  return (\r\n    <div className=\"mx-auto w-full container flex flex-col justify-center items-center py-5\">\r\n        <RichTextEditorDemo className=\"col-span-full w-full\"/>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:page",
      "target": "app/text-editor/page.tsx"
    },
    {
      "path": "registry/basic/components/rich-text-editor.tsx",
      "content": "\"use client\";\nimport \"./tiptap.css\";\nimport { cn } from \"@/lib/utils\";\nimport { ImageExtension } from \"@/components/tiptap/extensions/image\";\nimport { ImagePlaceholder } from \"@/components/tiptap/extensions/image-placeholder\";\nimport SearchAndReplace from \"@/components/tiptap/extensions/search-and-replace\";\nimport { Color } from \"@tiptap/extension-color\";\nimport Highlight from \"@tiptap/extension-highlight\";\nimport Link from \"@tiptap/extension-link\";\nimport Subscript from \"@tiptap/extension-subscript\";\nimport Superscript from \"@tiptap/extension-superscript\";\nimport TextAlign from \"@tiptap/extension-text-align\";\nimport TextStyle from \"@tiptap/extension-text-style\";\nimport Typography from \"@tiptap/extension-typography\";\nimport Underline from \"@tiptap/extension-underline\";\nimport { EditorContent, type Extension, useEditor } from \"@tiptap/react\";\nimport StarterKit from \"@tiptap/starter-kit\";\nimport { TipTapFloatingMenu } from \"@/components/tiptap/extensions/floating-menu\";\nimport { FloatingToolbar } from \"@/components/tiptap/extensions/floating-toolbar\";\nimport { EditorToolbar } from \"./toolbars/editor-toolbar\";\nimport Placeholder from \"@tiptap/extension-placeholder\"\nimport {content} from \"@/lib/content\"\n\nconst extensions = [\n  StarterKit.configure({\n    orderedList: {\n      HTMLAttributes: {\n        class: \"list-decimal\",\n      },\n    },\n    bulletList: {\n      HTMLAttributes: {\n        class: \"list-disc\",\n      },\n    },\n    heading: {\n      levels: [1, 2, 3, 4],\n    },\n  }),\n  Placeholder.configure({\n    emptyNodeClass: \"is-editor-empty\",\n    placeholder: ({ node }) => {\n      switch (node.type.name) {\n        case \"heading\":\n          return `Heading ${node.attrs.level}`;\n        case \"detailsSummary\":\n          return \"Section title\";\n        case \"codeBlock\":\n          // never show the placeholder when editing code\n          return \"\";\n        default:\n          return \"Write, type '/' for commands\";\n      }\n    },\n    includeChildren: false,\n  }),\n  TextAlign.configure({\n    types: [\"heading\", \"paragraph\"],\n  }),\n  TextStyle,\n  Subscript,\n  Superscript,\n  Underline,\n  Link,\n  Color,\n  Highlight.configure({\n    multicolor: true,\n  }),\n  ImageExtension,\n  ImagePlaceholder,\n  SearchAndReplace,\n  Typography,\n];\n\n\nexport function RichTextEditorDemo({ className }: { className?: string }) {\n  const editor = useEditor({\n    immediatelyRender: false,\n    extensions: extensions as Extension[],\n    content,\n    editorProps: {\n      attributes: {\n        class: \"max-w-full focus:outline-none\",\n      },\n    },\n    onUpdate: ({ editor }) => {\n      // do what you want to do with output\n      // Update stats\n      // saving as text/json/hmtml\n      // const text = editor.getHTML();\n      console.log(editor.getText());\n    },\n  });\n\n  if (!editor) return null;\n\n  return (\n    <div\n      className={cn(\n        \"w-full bg-card rounded-xl border overflow-hidden\",\n        className\n      )}\n    >\n      <EditorToolbar editor={editor} />\n      <div className=\"relative pb-[60px] sm:pb-0 overflow-y-scroll max-h-[700px]\">\n        <FloatingToolbar editor={editor} />\n        <TipTapFloatingMenu editor={editor} />\n        <EditorContent\n          editor={editor}\n          className=\" min-h-[600px] w-full min-w-full cursor-text p-0.5 sm:p-6\"\n        />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/tiptap/rich-text-editor.tsx"
    },
    {
      "path": "registry/basic/components/tiptap.css",
      "content": "\r\n:root {\r\n  /* Color System */\r\n  --editor-text-default: hsl(240 10% 3.9%);\r\n  --editor-text-gray: hsl(240 3.8% 46.1%);\r\n  --editor-text-brown: hsl(25 95% 53%);\r\n  --editor-text-orange: hsl(24 95% 53%);\r\n  --editor-text-yellow: hsl(48 96% 53%);\r\n  --editor-text-green: hsl(142 71% 45%);\r\n  --editor-text-blue: hsl(221 83% 53%);\r\n  --editor-text-purple: hsl(269 97% 85%);\r\n  --editor-text-pink: hsl(336 80% 58%);\r\n  --editor-text-red: hsl(0 84% 60%);\r\n\r\n  /* Background Colors */\r\n  --editor-bg-default: hsl(0 0% 100%);\r\n  --editor-bg-subtle: hsl(0 0% 98%);\r\n  --editor-bg-muted: hsl(240 5% 96%);\r\n  \r\n  /* Highlight Colors */\r\n  --editor-highlight-default: hsl(0 0% 98%);\r\n  --editor-highlight-gray: hsl(240 5% 96%);\r\n  --editor-highlight-brown: hsl(43 96% 96%);\r\n  --editor-highlight-orange: hsl(33 100% 96%);\r\n  --editor-highlight-yellow: hsl(54 100% 96%);\r\n  --editor-highlight-green: hsl(142 71% 96%);\r\n  --editor-highlight-blue: hsl(217 91% 96%);\r\n  --editor-highlight-purple: hsl(269 97% 96%);\r\n  --editor-highlight-pink: hsl(336 80% 96%);\r\n  --editor-highlight-red: hsl(0 84% 96%);\r\n\r\n  /* Border Colors */\r\n  --editor-border-default: hsl(240 5% 88%);\r\n  --editor-border-strong: hsl(240 5% 65%);\r\n\r\n  /* Spacing System */\r\n  --editor-spacing-1: 0.25rem;\r\n  --editor-spacing-2: 0.5rem;\r\n  --editor-spacing-3: 0.75rem;\r\n  --editor-spacing-4: 1rem;\r\n  --editor-spacing-6: 1.5rem;\r\n  --editor-spacing-8: 2rem;\r\n  --editor-spacing-12: 3rem;\r\n  --editor-spacing-16: 4rem;\r\n\r\n  /* Typography */\r\n  --editor-font-sans: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\r\n  --editor-font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, monospace;\r\n  --editor-font-serif: Georgia, Cambria, \"Times New Roman\", Times, serif;\r\n\r\n  /* Animation */\r\n  --editor-transition-fast: 150ms cubic-bezier(0.4, 0, 0.2, 1);\r\n  --editor-transition-normal: 200ms cubic-bezier(0.4, 0, 0.2, 1);\r\n  --editor-transition-slow: 300ms cubic-bezier(0.4, 0, 0.2, 1);\r\n\r\n  /* Shadows */\r\n  --editor-shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);\r\n  --editor-shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);\r\n  --editor-shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\r\n}\r\n\r\n/* Dark Mode Custom Properties */\r\n.dark {\r\n  --editor-text-default: hsl(0 0% 98%);\r\n  --editor-text-gray: hsl(240 5% 64.9%);\r\n  --editor-text-brown: hsl(25 95% 53%);\r\n  --editor-text-orange: hsl(24 95% 53%);\r\n  --editor-text-yellow: hsl(48 96% 53%);\r\n  --editor-text-green: hsl(142 71% 45%);\r\n  --editor-text-blue: hsl(221 83% 53%);\r\n  --editor-text-purple: hsl(269 97% 85%);\r\n  --editor-text-pink: hsl(336 80% 58%);\r\n  --editor-text-red: hsl(0 84% 60%);\r\n\r\n  --editor-bg-default: hsl(240 10% 3.9%);\r\n  --editor-bg-subtle: hsl(240 3.7% 15.9%);\r\n  --editor-bg-muted: hsl(240 5% 26%);\r\n\r\n  --editor-highlight-default: hsl(240 3.7% 15.9%);\r\n  --editor-highlight-gray: hsl(240 5% 26%);\r\n  --editor-highlight-brown: hsl(43 96% 10%);\r\n  --editor-highlight-orange: hsl(33 100% 10%);\r\n  --editor-highlight-yellow: hsl(54 100% 10%);\r\n  --editor-highlight-green: hsl(142 71% 10%);\r\n  --editor-highlight-blue: hsl(217 91% 10%);\r\n  --editor-highlight-purple: hsl(269 97% 10%);\r\n  --editor-highlight-pink: hsl(336 80% 10%);\r\n  --editor-highlight-red: hsl(0 84% 10%);\r\n\r\n  --editor-border-default: hsl(240 5% 26%);\r\n  --editor-border-strong: hsl(240 5% 64.9%);\r\n}\r\n\r\n/* Core Editor Styles */\r\n.ProseMirror {\r\n  caret-color: var(--editor-text-default);\r\n  outline: none;\r\n  padding: var(--editor-spacing-16) var(--editor-spacing-8);\r\n  margin: 0 auto;\r\n  max-width: 90ch;\r\n  font-family: var(--editor-font-sans);\r\n  position: relative;\r\n  /* background-color: var(--editor-bg-default); */\r\n  color: var(--editor-text-default);\r\n  transition: all var(--editor-transition-normal);\r\n  min-height: 100vh;\r\n  text-rendering: optimizeLegibility;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n}\r\n\r\n.ProseMirror:focus {\r\n  outline: none;\r\n  box-shadow: none;\r\n}\r\n\r\n.ProseMirror .selection,\r\n.ProseMirror *::selection {\r\n  background-color: var(--editor-highlight-blue);\r\n  /* color: var(--editor-text-default); */\r\n}\r\n\r\n.ProseMirror > .react-renderer {\r\n  margin: var(--editor-spacing-12) 0;\r\n  transition: all var(--editor-transition-normal);\r\n}\r\n\r\n.ProseMirror > .react-renderer:first-child {\r\n  margin-top: 0;\r\n}\r\n\r\n.ProseMirror > .react-renderer:last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n/* Typography Styles */\r\n.ProseMirror p {\r\n  line-height: 1.75;\r\n  margin: var(--editor-spacing-4) 0;\r\n  color: var(--editor-text-default);\r\n  font-size: 1.125rem;\r\n}\r\n\r\n.ProseMirror > p {\r\n  margin: var(--editor-spacing-6) 0;\r\n}\r\n\r\n.ProseMirror h1,\r\n.ProseMirror h2,\r\n.ProseMirror h3,\r\n.ProseMirror h4 {\r\n  font-family: var(--editor-font-sans);\r\n  font-weight: 700;\r\n  letter-spacing: -0.025em;\r\n  color: var(--editor-text-default);\r\n  scroll-margin-top: var(--editor-spacing-16);\r\n  line-height: 1.2;\r\n}\r\n\r\n.ProseMirror h1 {\r\n  font-size: 2.5rem;\r\n  margin: var(--editor-spacing-8) 0 var(--editor-spacing-4);\r\n}\r\n\r\n.ProseMirror h2 {\r\n  font-size: 2rem;\r\n  margin: var(--editor-spacing-8) 0 var(--editor-spacing-4);\r\n}\r\n\r\n.ProseMirror h3 {\r\n  font-size: 1.5rem;\r\n  margin: var(--editor-spacing-6) 0 var(--editor-spacing-3);\r\n}\r\n\r\n.ProseMirror h4 {\r\n  font-size: 1.25rem;\r\n  margin: var(--editor-spacing-4) 0 var(--editor-spacing-2);\r\n}\r\n\r\n.ProseMirror a {\r\n  color: var(--editor-text-blue);\r\n  cursor: pointer;\r\n  text-decoration: underline;\r\n  text-decoration-thickness: 0.1em;\r\n  text-underline-offset: 0.2em;\r\n  transition: all var(--editor-transition-fast);\r\n}\r\n\r\n.ProseMirror a:hover {\r\n  color: var(--editor-text-blue);\r\n  text-decoration-thickness: 0.2em;\r\n}\r\n\r\n.ProseMirror code {\r\n  font-family: var(--editor-font-mono);\r\n  font-size: 0.9em;\r\n  background-color: var(--editor-bg-muted);\r\n  padding: 0.2em 0.4em;\r\n  border-radius: 4px;\r\n  color: var(--editor-text-default);\r\n  border: 1px solid var(--editor-border-default);\r\n}\r\n\r\n.ProseMirror pre {\r\n  margin: var(--editor-spacing-6) 0;\r\n  padding: var(--editor-spacing-4);\r\n  background-color: var(--editor-bg-subtle);\r\n  border-radius: 8px;\r\n  overflow-x: auto;\r\n  border: 1px solid var(--editor-border-default);\r\n}\r\n\r\n.ProseMirror pre code {\r\n  background-color: transparent;\r\n  padding: 0;\r\n  border: none;\r\n  font-size: 0.875rem;\r\n  line-height: 1.7;\r\n  color: var(--editor-text-default);\r\n}\r\n\r\n.ProseMirror blockquote {\r\n  margin: var(--editor-spacing-6) 0;\r\n  padding: var(--editor-spacing-4) var(--editor-spacing-6);\r\n  border-left: 4px solid var(--editor-border-strong);\r\n  font-style: italic;\r\n  color: var(--editor-text-gray);\r\n  background-color: var(--editor-bg-subtle);\r\n  border-radius: 0 8px 8px 0;\r\n}\r\n\r\n/* Lists */\r\n.ProseMirror ul,\r\n.ProseMirror ol {\r\n  margin: var(--editor-spacing-4) 0;\r\n  padding-left: var(--editor-spacing-6);\r\n}\r\n\r\n.ProseMirror li {\r\n  margin: var(--editor-spacing-2) 0;\r\n  padding-left: var(--editor-spacing-2);\r\n}\r\n\r\n.ProseMirror ul {\r\n  list-style-type: disc;\r\n}\r\n\r\n.ProseMirror ul ul {\r\n  list-style-type: circle;\r\n}\r\n\r\n.ProseMirror ul ul ul {\r\n  list-style-type: square;\r\n}\r\n\r\n.ProseMirror ol {\r\n  list-style-type: decimal;\r\n}\r\n\r\n.ProseMirror ol ol {\r\n  list-style-type: lower-alpha;\r\n}\r\n\r\n.ProseMirror ol ol ol {\r\n  list-style-type: lower-roman;\r\n}\r\n\r\n/* Tables */\r\n.ProseMirror table {\r\n  width: 100%;\r\n  border-collapse: separate;\r\n  border-spacing: 0;\r\n  margin: var(--editor-spacing-6) 0;\r\n  border: 1px solid var(--editor-border-default);\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n}\r\n\r\n.ProseMirror th {\r\n  background-color: var(--editor-bg-subtle);\r\n  font-weight: 600;\r\n  text-align: left;\r\n  padding: var(--editor-spacing-3) var(--editor-spacing-4);\r\n  border-bottom: 2px solid var(--editor-border-default);\r\n}\r\n\r\n.ProseMirror td {\r\n  padding: var(--editor-spacing-3) var(--editor-spacing-4);\r\n  border-bottom: 1px solid var(--editor-border-default);\r\n  transition: background-color var(--editor-transition-fast);\r\n}\r\n\r\n.ProseMirror tr:last-child td {\r\n  border-bottom: none;\r\n}\r\n\r\n.ProseMirror tr:hover td {\r\n  background-color: var(--editor-bg-subtle);\r\n}\r\n\r\n/* Images */\r\n.ProseMirror img {\r\n  max-width: 100%;\r\n  height: auto;\r\n  border-radius: 8px;\r\n  border: 1px solid var(--editor-border-default);\r\n  box-shadow: var(--editor-shadow-sm);\r\n  transition: all var(--editor-transition-normal);\r\n  display: block;\r\n  margin: var(--editor-spacing-1) auto;\r\n}\r\n\r\n.ProseMirror img:hover {\r\n  box-shadow: var(--editor-shadow-lg);\r\n  transform: translateY(-2px);\r\n}\r\n\r\n/* Horizontal Rule */\r\n.ProseMirror hr {\r\n  margin: var(--editor-spacing-8) 0;\r\n  border: none;\r\n  border-top: 2px solid var(--editor-border-default);\r\n}\r\n\r\n/* Floating Menu & Toolbar */\r\n.floating-menu {\r\n  background-color: var(--editor-bg-default);\r\n  border: 1px solid var(--editor-border-default);\r\n  box-shadow: var(--editor-shadow-lg);\r\n  border-radius: 8px;\r\n  padding: var(--editor-spacing-1);\r\n  display: flex;\r\n  gap: var(--editor-spacing-1);\r\n  align-items: center;\r\n  animation: fadeIn var(--editor-transition-normal);\r\n  backdrop-filter: blur(8px);\r\n}\r\n\r\n.toolbar-button {\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border-radius: 6px;\r\n  font-size: 0.875rem;\r\n  font-weight: 500;\r\n  height: 2.25rem;\r\n  padding: 0 var(--editor-spacing-3);\r\n  transition: all var(--editor-transition-fast);\r\n  background-color: transparent;\r\n  color: var(--editor-text-default);\r\n  border: 1px solid transparent;\r\n}\r\n\r\n.toolbar-button:hover {\r\n  background-color: var(--editor-bg-subtle);\r\n  color: var(--editor-text-default);\r\n}\r\n\r\n.toolbar-button:focus-visible {\r\n  outline: none;\r\n  box-shadow: 0 0 0 2px var(--editor-border-strong);\r\n}\r\n\r\n.toolbar-button:disabled {\r\n  opacity: 0.5;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.toolbar-button.active {\r\n  background-color: var(--editor-bg-muted);\r\n  color: var(--editor-text-blue);\r\n}\r\n\r\n/* Placeholder Styles\r\n.ProseMirror p.is-editor-empty:first-child::before {\r\n  content: \"Start writing or press '/' for commands...\";\r\n  color: var(--editor-text-gray);\r\n  pointer-events: none;\r\n  float: left;\r\n  height: 0;\r\n} */\r\n\r\n/* Mobile Optimizations */\r\n@media (max-width: 640px) {\r\n  .ProseMirror {\r\n    padding: var(--editor-spacing-8) var(--editor-spacing-4);\r\n  }\r\n\r\n  .ProseMirror h1 { font-size: 2rem; }\r\n  .ProseMirror h2 { font-size: 1.75rem; }\r\n  .ProseMirror h3 { font-size: 1.5rem; }\r\n  .ProseMirror h4 { font-size: 1.25rem; }\r\n  .ProseMirror p { font-size: 1rem; }\r\n}\r\n\r\n/* Animations */\r\n@keyframes fadeIn {\r\n  from { opacity: 0; transform: translateY(-8px); }\r\n  to { opacity: 1; transform: translateY(0); }\r\n}\r\n\r\n/* Print Styles */\r\n@media print {\r\n  .ProseMirror {\r\n    padding: 0;\r\n    max-width: none;\r\n  }\r\n\r\n  .floating-menu,\r\n  .toolbar-button {\r\n    display: none;\r\n  }\r\n}\r\n\r\n.is-editor-empty::before {\r\n  color: var(--editor-text-gray);\r\n  content: attr(data-placeholder);\r\n  float: left;\r\n  height: 0;\r\n  pointer-events: none;\r\n}\r\n",
      "type": "registry:component",
      "target": "components/tiptap/tiptap.css"
    },
    {
      "path": "registry/basic/components/extensions/floating-menu.tsx",
      "content": "\"use client\";\n\nimport {\n  Heading1,\n  Heading2,\n  Heading3,\n  ListOrdered,\n  List,\n  Code2,\n  ChevronRight,\n  Quote, ImageIcon,\n  Minus, AlignLeft,\n  AlignCenter,\n  AlignRight,\n  CodeSquare,\n  TextQuote\n} from \"lucide-react\";\nimport { FloatingMenu } from \"@tiptap/react\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport type { Editor } from \"@tiptap/core\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useDebounce } from \"@/hooks/use-debounce\";\n\ninterface CommandItemType {\n  title: string;\n  description: string;\n  icon: React.ComponentType<{ className?: string }>;\n  keywords: string;\n  command: (editor: Editor) => void;\n  group: string;\n}\n\ntype CommandGroupType = {\n  group: string;\n  items: Omit<CommandItemType, \"group\">[];\n};\n\nconst groups: CommandGroupType[] = [\n  {\n    group: \"Basic blocks\",\n    items: [\n      {\n        title: \"Text\",\n        description: \"Just start writing with plain text\",\n        icon: ChevronRight,\n        keywords: \"paragraph text\",\n        command: (editor) => editor.chain().focus().clearNodes().run(),\n      },\n      {\n        title: \"Heading 1\",\n        description: \"Large section heading\",\n        icon: Heading1,\n        keywords: \"h1 title header\",\n        command: (editor) =>\n          editor.chain().focus().toggleHeading({ level: 1 }).run(),\n      },\n      {\n        title: \"Heading 2\",\n        description: \"Medium section heading\",\n        icon: Heading2,\n        keywords: \"h2 subtitle\",\n        command: (editor) =>\n          editor.chain().focus().toggleHeading({ level: 2 }).run(),\n      },\n      {\n        title: \"Heading 3\",\n        description: \"Small section heading\",\n        icon: Heading3,\n        keywords: \"h3 subheader\",\n        command: (editor) =>\n          editor.chain().focus().toggleHeading({ level: 3 }).run(),\n      },\n      {\n        title: \"Bullet List\",\n        description: \"Create a simple bullet list\",\n        icon: List,\n        keywords: \"unordered ul bullets\",\n        command: (editor) => editor.chain().focus().toggleBulletList().run(),\n      },\n      {\n        title: \"Numbered List\",\n        description: \"Create a ordered list\",\n        icon: ListOrdered,\n        keywords: \"numbered ol\",\n        command: (editor) => editor.chain().focus().toggleOrderedList().run(),\n      },\n      {\n        title: \"Code Block\",\n        description: \"Capture code snippets\",\n        icon: Code2,\n        keywords: \"code snippet pre\",\n        command: (editor) => editor.chain().focus().toggleCodeBlock().run(),\n      },\n      {\n        title: \"Image\",\n        description: \"Insert an image\",\n        icon: ImageIcon,\n        keywords: \"image picture photo\",\n        command: (editor) => editor.chain().focus().insertImagePlaceholder().run(),\n      },\n      {\n        title: \"Horizontal Rule\",\n        description: \"Add a horizontal divider\",\n        icon: Minus,\n        keywords: \"horizontal rule divider\",\n        command: (editor) => editor.chain().focus().setHorizontalRule().run(),\n      },\n    ],\n  },\n  {\n    group: \"Inline\",\n    items: [\n      {\n        title: \"Quote\",\n        description: \"Capture a quotation\",\n        icon: Quote,\n        keywords: \"blockquote cite\",\n        command: (editor) => editor.chain().focus().toggleBlockquote().run(),\n      },\n      {\n        title: \"Code\",\n        description: \"Inline code snippet\",\n        icon: CodeSquare,\n        keywords: \"code inline\",\n        command: (editor) => editor.chain().focus().toggleCode().run(),\n      },\n      {\n        title: \"Blockquote\",\n        description: \"Block quote\",\n        icon: TextQuote,\n        keywords: \"blockquote quote\",\n        command: (editor) => editor.chain().focus().toggleBlockquote().run(),\n      },\n    ],\n  },\n  {\n    group: \"Alignment\",\n    items: [\n      {\n        title: \"Align Left\",\n        description: \"Align text to the left\",\n        icon: AlignLeft,\n        keywords: \"align left\",\n        command: (editor) => editor.chain().focus().setTextAlign(\"left\").run(),\n      },\n      {\n        title: \"Align Center\",\n        description: \"Center align text\",\n        icon: AlignCenter,\n        keywords: \"align center\",\n        command: (editor) =>\n          editor.chain().focus().setTextAlign(\"center\").run(),\n      },\n      {\n        title: \"Align Right\",\n        description: \"Align text to the right\",\n        icon: AlignRight,\n        keywords: \"align right\",\n        command: (editor) => editor.chain().focus().setTextAlign(\"right\").run(),\n      },\n    ],\n  },\n];\n\nexport function TipTapFloatingMenu({ editor }: { editor: Editor }) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [search, setSearch] = useState(\"\");\n  const debouncedSearch = useDebounce(search, 300);\n  const commandRef = useRef<HTMLDivElement>(null);\n  const [selectedIndex, setSelectedIndex] = useState(-1);\n  const itemRefs = useRef<(HTMLDivElement | null)[]>([]);\n\n  const filteredGroups = useMemo(\n    () =>\n      groups\n        .map((group) => ({\n          ...group,\n          items: group.items.filter(\n            (item) =>\n              item.title.toLowerCase().includes(debouncedSearch.toLowerCase()) ||\n              item.description.toLowerCase().includes(debouncedSearch.toLowerCase()) ||\n              item.keywords.toLowerCase().includes(debouncedSearch.toLowerCase())\n          ),\n        }))\n        .filter((group) => group.items.length > 0),\n    [debouncedSearch]\n  );\n\n  const flatFilteredItems = useMemo(\n    () => filteredGroups.flatMap((g) => g.items),\n    [filteredGroups]\n  );\n\n  const executeCommand = useCallback(\n    (commandFn: (editor: Editor) => void) => {\n      if (!editor) return;\n\n      try {\n        const { from } = editor.state.selection;\n        const slashCommandLength = search.length + 1;\n\n        editor\n          .chain()\n          .focus()\n          .deleteRange({\n            from: Math.max(0, from - slashCommandLength),\n            to: from,\n          })\n          .run();\n\n        commandFn(editor);\n      } catch (error) {\n        console.error(\"Error executing command:\", error);\n      } finally {\n        setIsOpen(false);\n        setSearch(\"\");\n        setSelectedIndex(-1);\n      }\n    },\n    [editor, search]\n  );\n\n  const handleKeyDown = useCallback(\n    (e: KeyboardEvent) => {\n      if (!isOpen || !editor) return;\n\n      const preventDefault = () => {\n        e.preventDefault();\n        e.stopImmediatePropagation();\n      };\n\n      switch (e.key) {\n        case \"ArrowDown\":\n          preventDefault();\n          setSelectedIndex((prev) => {\n            if (prev === -1) return 0;\n            return prev < flatFilteredItems.length - 1 ? prev + 1 : 0;\n          });\n          break;\n\n        case \"ArrowUp\":\n          preventDefault();\n          setSelectedIndex((prev) => {\n            if (prev === -1) return flatFilteredItems.length - 1;\n            return prev > 0 ? prev - 1 : flatFilteredItems.length - 1;\n          });\n          break;\n\n        case \"Enter\":\n          preventDefault();\n          const targetIndex = selectedIndex === -1 ? 0 : selectedIndex;\n          if (flatFilteredItems[targetIndex]) {\n            executeCommand(flatFilteredItems[targetIndex].command);\n          }\n          break;\n\n        case \"Escape\":\n          preventDefault();\n          setIsOpen(false);\n          setSelectedIndex(-1);\n          break;\n      }\n    },\n    [isOpen, selectedIndex, flatFilteredItems, executeCommand, editor]\n  );\n\n  useEffect(() => {\n    if (!editor?.options.element) return;\n\n    const editorElement = editor.options.element;\n    const handleEditorKeyDown = (e: Event) => handleKeyDown(e as KeyboardEvent);\n\n    editorElement.addEventListener(\"keydown\", handleEditorKeyDown);\n    return () =>\n      editorElement.removeEventListener(\"keydown\", handleEditorKeyDown);\n  }, [handleKeyDown, editor]);\n\n  // Add new effect for resetting selectedIndex\n  useEffect(() => {\n    setSelectedIndex(-1);\n  }, [search]);\n\n  useEffect(() => {\n    if (selectedIndex >= 0 && itemRefs.current[selectedIndex]) {\n      itemRefs.current[selectedIndex]?.focus();\n    }\n  }, [selectedIndex]);\n\n  return (\n    <FloatingMenu\n      editor={editor}\n      shouldShow={({ state }) => {\n        if (!editor) return false;\n\n        const { $from } = state.selection;\n        const currentLineText = $from.parent.textBetween(\n          0,\n          $from.parentOffset,\n          \"\\n\",\n          \" \"\n        );\n\n        const isSlashCommand =\n          currentLineText.startsWith(\"/\") &&\n          $from.parent.type.name !== \"codeBlock\" &&\n          $from.parentOffset === currentLineText.length;\n\n        if (!isSlashCommand) {\n          if (isOpen) setIsOpen(false);\n          return false;\n        }\n\n        const query = currentLineText.slice(1).trim();\n        if (query !== search) setSearch(query);\n        if (!isOpen) setIsOpen(true);\n        return true;\n      }}\n      tippyOptions={{\n        placement: \"bottom-start\",\n        interactive: true,\n        appendTo: () => document.body,\n        onHide: () => {\n          setIsOpen(false);\n          setSelectedIndex(-1);\n        },\n      }}\n    >\n      <Command role=\"listbox\" ref={commandRef} className=\"z-50 w-72 overflow-hidden rounded-lg border bg-popover shadow-lg\">\n        <ScrollArea className=\"max-h-[330px]\">\n          <CommandList>\n            <CommandEmpty className=\"py-3 text-center text-sm text-muted-foreground\">\n              No results found\n            </CommandEmpty>\n\n            {filteredGroups.map((group, groupIndex) => (\n              <CommandGroup\n                key={`${group.group}-${groupIndex}`}\n                heading={\n                  <div className=\"px-2 py-1.5 text-xs font-medium text-muted-foreground\">\n                    {group.group}\n                  </div>\n                }\n              >\n                {group.items.map((item, itemIndex) => {\n                  const flatIndex =\n                    filteredGroups\n                      .slice(0, groupIndex)\n                      .reduce((acc, g) => acc + g.items.length, 0) + itemIndex;\n\n                  return (\n                    <CommandItem\n                      role=\"option\"\n                      key={`${group.group}-${item.title}-${itemIndex}`}\n                      value={`${group.group}-${item.title}`}\n                      onSelect={() => executeCommand(item.command)}\n                      className={cn(\n                        \"gap-3 aria-selected:bg-accent/50\",\n                        flatIndex === selectedIndex ? \"bg-accent/50\" : \"\"\n                      )}\n                      aria-selected={flatIndex === selectedIndex}\n                      ref={(el) => {\n                        itemRefs.current[flatIndex] = el;\n                      }}\n                      tabIndex={flatIndex === selectedIndex ? 0 : -1}\n                    >\n                      <div className=\"flex h-9 w-9 items-center justify-center rounded-md border bg-background\">\n                        <item.icon className=\"h-4 w-4\" />\n                      </div>\n                      <div className=\"flex flex-1 flex-col\">\n                        <span className=\"text-sm font-medium\">\n                          {item.title}\n                        </span>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {item.description}\n                        </span>\n                      </div>\n                      <kbd className=\"ml-auto flex h-5 items-center rounded bg-muted px-1.5 text-xs text-muted-foreground\">\n                        ↵\n                      </kbd>\n                    </CommandItem>\n                  );\n                })}\n              </CommandGroup>\n            ))}\n          </CommandList>\n        </ScrollArea>\n      </Command>\n    </FloatingMenu>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/tiptap/extensions/floating-menu.tsx"
    },
    {
      "path": "registry/basic/components/extensions/floating-toolbar.tsx",
      "content": "\"use client\";\r\n\r\nimport { BubbleMenu, type Editor } from \"@tiptap/react\";\r\nimport { BoldToolbar } from \"../toolbars/bold\";\r\nimport { ItalicToolbar } from \"../toolbars/italic\";\r\nimport { UnderlineToolbar } from \"../toolbars/underline\";\r\nimport { LinkToolbar } from \"../toolbars/link\";\r\nimport { ColorHighlightToolbar } from \"../toolbars/color-and-highlight\";\r\nimport { ToolbarProvider } from \"../toolbars/toolbar-provider\";\r\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\r\nimport { useMediaQuery } from \"@/hooks/use-media-querry\";\r\nimport { ScrollArea, ScrollBar } from \"@/components/ui/scroll-area\";\r\nimport { Separator } from \"@/components/ui/separator\";\r\nimport { HeadingsToolbar } from \"../toolbars/headings\";\r\nimport { BulletListToolbar } from \"../toolbars/bullet-list\";\r\nimport { OrderedListToolbar } from \"../toolbars/ordered-list\";\r\nimport { ImagePlaceholderToolbar } from \"../toolbars/image-placeholder-toolbar\";\r\nimport { AlignmentTooolbar } from \"../toolbars/alignment\";\r\nimport { BlockquoteToolbar } from \"../toolbars/blockquote\";\r\nimport { useEffect } from \"react\";\r\n\r\nexport function FloatingToolbar({ editor }: { editor: Editor | null }) {\r\n  const isMobile = useMediaQuery(\"(max-width: 640px)\");\r\n\r\n  // Prevent default context menu on mobile\r\n  useEffect(() => {\r\n    if (!editor?.options.element || !isMobile) return;\r\n\r\n    const handleContextMenu = (e: Event) => {\r\n      e.preventDefault();\r\n    };\r\n\r\n    const el = editor.options.element;\r\n    el.addEventListener(\"contextmenu\", handleContextMenu);\r\n\r\n    return () => el.removeEventListener(\"contextmenu\", handleContextMenu);\r\n  }, [editor, isMobile]);\r\n\r\n  if (!editor) return null;\r\n\r\n  if (isMobile) {\r\n    return (\r\n      <TooltipProvider>\r\n        <BubbleMenu\r\n          tippyOptions={{\r\n            duration: 100,\r\n            placement: \"bottom\",\r\n            offset: [0, 10],\r\n          }}\r\n          shouldShow={() => {\r\n            // Show toolbar when editor is focused and has selection\r\n            return editor.isEditable && editor.isFocused;\r\n          }}\r\n          editor={editor}\r\n          className=\"w-full min-w-full mx-0 shadow-sm border rounded-sm bg-background\"\r\n        >\r\n          <ToolbarProvider editor={editor}>\r\n            <ScrollArea className=\"h-fit py-0.5 w-full\">\r\n              <div className=\"flex items-center px-2 gap-0.5\">\r\n                <div className=\"flex items-center gap-0.5 p-1\">\r\n                  {/* Primary formatting */}\r\n                  <BoldToolbar />\r\n                  <ItalicToolbar />\r\n                  <UnderlineToolbar />\r\n                  <Separator orientation=\"vertical\" className=\"h-6 mx-1\" />\r\n\r\n                  {/* Structure controls */}\r\n                  <HeadingsToolbar />\r\n                  <BulletListToolbar />\r\n                  <OrderedListToolbar />\r\n                  <Separator orientation=\"vertical\" className=\"h-6 mx-1\" />\r\n\r\n                  {/* Rich formatting */}\r\n                  <ColorHighlightToolbar />\r\n                  <LinkToolbar />\r\n                  <ImagePlaceholderToolbar />\r\n                  <Separator orientation=\"vertical\" className=\"h-6 mx-1\" />\r\n\r\n                  {/* Additional controls */}\r\n                  <AlignmentTooolbar />\r\n                  <BlockquoteToolbar />\r\n                </div>\r\n              </div>\r\n              <ScrollBar className=\"h-0.5\" orientation=\"horizontal\" />\r\n            </ScrollArea>\r\n          </ToolbarProvider>\r\n        </BubbleMenu>\r\n      </TooltipProvider>\r\n    );\r\n  }\r\n\r\n  return null;\r\n}\r\n",
      "type": "registry:component",
      "target": "components/tiptap/extensions/floating-toolbar.tsx"
    },
    {
      "path": "registry/basic/components/extensions/image.tsx",
      "content": "\"use client\";\n/* eslint-disable */\n// @ts-nocheck\nimport Image from \"@tiptap/extension-image\";\nimport {\n  NodeViewContent,\n  type NodeViewProps,\n  NodeViewWrapper,\n  ReactNodeViewRenderer,\n} from \"@tiptap/react\";\nimport {\n  AlignCenter,\n  AlignLeft,\n  AlignRight,\n  CopyIcon,\n  Maximize,\n  MoreVertical,\n  Trash,\n  Edit,\n  ImageIcon,\n  Link,\n  Upload,\n  Loader2,\n} from \"lucide-react\";\nimport { useEffect, useRef, useState } from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { cn } from \"@/lib/utils\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { useImageUpload } from \"@/hooks/use-image-upload\";\n\nexport const ImageExtension = Image.extend({\n  addAttributes() {\n    return {\n      src: {\n        default: null,\n      },\n      alt: {\n        default: null,\n      },\n      title: {\n        default: null,\n      },\n      width: {\n        default: \"100%\",\n      },\n      height: {\n        default: null,\n      },\n      align: {\n        default: \"center\",\n      },\n      caption: {\n        default: \"\",\n      },\n      aspectRatio: {\n        default: null,\n      },\n    };\n  },\n\n  addNodeView: () => {\n    return ReactNodeViewRenderer(TiptapImage);\n  },\n});\n\nfunction TiptapImage(props: NodeViewProps) {\n  const { node, editor, selected, deleteNode, updateAttributes } = props;\n  const imageRef = useRef<HTMLImageElement | null>(null);\n  const nodeRef = useRef<HTMLDivElement | null>(null);\n  const [resizing, setResizing] = useState(false);\n  const [resizingPosition, setResizingPosition] = useState<\"left\" | \"right\">(\n    \"left\"\n  );\n  const [resizeInitialWidth, setResizeInitialWidth] = useState(0);\n  const [resizeInitialMouseX, setResizeInitialMouseX] = useState(0);\n  const [editingCaption, setEditingCaption] = useState(false);\n  const [caption, setCaption] = useState(node.attrs.caption || \"\");\n  const [openedMore, setOpenedMore] = useState(false);\n  const [imageUrl, setImageUrl] = useState(\"\");\n  const [altText, setAltText] = useState(node.attrs.alt || \"\");\n\n  const {\n    previewUrl,\n    fileInputRef,\n    handleFileChange,\n    handleRemove,\n    uploading,\n    error,\n  } = useImageUpload({\n    onUpload: (imageUrl) => {\n      updateAttributes({\n        src: imageUrl,\n        alt: altText || fileInputRef.current?.files?.[0]?.name,\n      });\n      handleRemove();\n      setOpenedMore(false);\n    },\n  });\n\n  function handleResizingPosition({\n    e,\n    position,\n  }: {\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>;\n    position: \"left\" | \"right\";\n  }) {\n    startResize(e);\n    setResizingPosition(position);\n  }\n\n  function startResize(event: React.MouseEvent<HTMLDivElement>) {\n    event.preventDefault();\n    setResizing(true);\n    setResizeInitialMouseX(event.clientX);\n    if (imageRef.current) {\n      setResizeInitialWidth(imageRef.current.offsetWidth);\n    }\n  }\n\n  function resize(event: MouseEvent) {\n    if (!resizing) return;\n\n    let dx = event.clientX - resizeInitialMouseX;\n    if (resizingPosition === \"left\") {\n      dx = resizeInitialMouseX - event.clientX;\n    }\n\n    const newWidth = Math.max(resizeInitialWidth + dx, 150);\n    const parentWidth = nodeRef.current?.parentElement?.offsetWidth ?? 0;\n\n    if (newWidth < parentWidth) {\n      updateAttributes({\n        width: newWidth,\n      });\n    }\n  }\n\n  function endResize() {\n    setResizing(false);\n    setResizeInitialMouseX(0);\n    setResizeInitialWidth(0);\n  }\n\n  function handleTouchStart(\n    event: React.TouchEvent,\n    position: \"left\" | \"right\"\n  ) {\n    event.preventDefault();\n    setResizing(true);\n    setResizingPosition(position);\n    setResizeInitialMouseX(event.touches[0].clientX);\n    if (imageRef.current) {\n      setResizeInitialWidth(imageRef.current.offsetWidth);\n    }\n  }\n\n  function handleTouchMove(event: TouchEvent) {\n    if (!resizing) return;\n\n    let dx = event.touches[0].clientX - resizeInitialMouseX;\n    if (resizingPosition === \"left\") {\n      dx = resizeInitialMouseX - event.touches[0].clientX;\n    }\n\n    const newWidth = Math.max(resizeInitialWidth + dx, 150);\n    const parentWidth = nodeRef.current?.parentElement?.offsetWidth ?? 0;\n\n    if (newWidth < parentWidth) {\n      updateAttributes({\n        width: newWidth,\n      });\n    }\n  }\n\n  function handleTouchEnd() {\n    setResizing(false);\n    setResizeInitialMouseX(0);\n    setResizeInitialWidth(0);\n  }\n\n  function handleCaptionChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const newCaption = e.target.value;\n    setCaption(newCaption);\n  }\n\n  function handleCaptionBlur() {\n    updateAttributes({ caption });\n    setEditingCaption(false);\n  }\n\n  function handleCaptionKeyDown(e: React.KeyboardEvent) {\n    if (e.key === \"Enter\") {\n      handleCaptionBlur();\n    }\n  }\n\n  const handleImageUrlSubmit = () => {\n    if (imageUrl) {\n      updateAttributes({\n        src: imageUrl,\n        alt: altText,\n      });\n      setImageUrl(\"\");\n      setAltText(\"\");\n      setOpenedMore(false);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"mousemove\", resize);\n    window.addEventListener(\"mouseup\", endResize);\n    window.addEventListener(\"touchmove\", handleTouchMove);\n    window.addEventListener(\"touchend\", handleTouchEnd);\n    return () => {\n      window.removeEventListener(\"mousemove\", resize);\n      window.removeEventListener(\"mouseup\", endResize);\n      window.removeEventListener(\"touchmove\", handleTouchMove);\n      window.removeEventListener(\"touchend\", handleTouchEnd);\n    };\n  }, [resizing, resizeInitialMouseX, resizeInitialWidth]);\n\n  return (\n    <NodeViewWrapper\n      ref={nodeRef}\n      className={cn(\n        \"relative flex flex-col rounded-md border-2 border-transparent transition-all duration-200\",\n        selected ? \"border-blue-300\" : \"\",\n        node.attrs.align === \"left\" && \"left-0 -translate-x-0\",\n        node.attrs.align === \"center\" && \"left-1/2 -translate-x-1/2\",\n        node.attrs.align === \"right\" && \"left-full -translate-x-full\"\n      )}\n      style={{ width: node.attrs.width }}\n    >\n      <div\n        className={cn(\n          \"group relative flex flex-col rounded-md\",\n          resizing && \"\"\n        )}\n      >\n        <figure className=\"relative m-0\">\n          <img\n            ref={imageRef}\n            src={node.attrs.src}\n            alt={node.attrs.alt}\n            title={node.attrs.title}\n            className=\"rounded-lg transition-shadow duration-200 hover:shadow-lg\"\n            onLoad={(e) => {\n              const img = e.currentTarget;\n              const aspectRatio = img.naturalWidth / img.naturalHeight;\n              updateAttributes({ aspectRatio });\n            }}\n          />\n          {editor?.isEditable && (\n            <>\n              <div\n                className=\"absolute inset-y-0 z-20 flex w-[25px] cursor-col-resize items-center justify-start p-2\"\n                style={{ left: 0 }}\n                onMouseDown={(event) => {\n                  handleResizingPosition({ e: event, position: \"left\" });\n                }}\n                onTouchStart={(event) => handleTouchStart(event, \"left\")}\n              >\n                <div className=\"z-20 h-[70px] w-1 rounded-xl border bg-[rgba(0,0,0,0.65)] opacity-0 transition-all group-hover:opacity-100\" />\n              </div>\n              <div\n                className=\"absolute inset-y-0 z-20 flex w-[25px] cursor-col-resize items-center justify-end p-2\"\n                style={{ right: 0 }}\n                onMouseDown={(event) => {\n                  handleResizingPosition({ e: event, position: \"right\" });\n                }}\n                onTouchStart={(event) => handleTouchStart(event, \"right\")}\n              >\n                <div className=\"z-20 h-[70px] w-1 rounded-xl border bg-[rgba(0,0,0,0.65)] opacity-0 transition-all group-hover:opacity-100\" />\n              </div>\n            </>\n          )}\n        </figure>\n\n        {editingCaption ? (\n          <Input\n            value={caption}\n            onChange={handleCaptionChange}\n            onBlur={handleCaptionBlur}\n            onKeyDown={handleCaptionKeyDown}\n            className=\"mt-2 text-center text-sm text-muted-foreground focus:ring-0\"\n            placeholder=\"Add a caption...\"\n            autoFocus\n          />\n        ) : (\n          <div\n            className=\"mt-2 cursor-text text-center text-sm text-muted-foreground\"\n            onClick={() => editor?.isEditable && setEditingCaption(true)}\n          >\n            {caption || \"Add a caption...\"}\n          </div>\n        )}\n\n        {editor?.isEditable && (\n          <div\n            className={cn(\n              \"absolute right-4 top-4 flex items-center gap-1 rounded-md border bg-background/80 p-1 opacity-0 backdrop-blur transition-opacity\",\n              !resizing && \"group-hover:opacity-100\",\n              openedMore && \"opacity-100\"\n            )}\n          >\n            <Button\n              size=\"icon\"\n              className={cn(\n                \"size-7\",\n                node.attrs.align === \"left\" && \"bg-accent\"\n              )}\n              variant=\"ghost\"\n              onClick={() => updateAttributes({ align: \"left\" })}\n            >\n              <AlignLeft className=\"size-4\" />\n            </Button>\n            <Button\n              size=\"icon\"\n              className={cn(\n                \"size-7\",\n                node.attrs.align === \"center\" && \"bg-accent\"\n              )}\n              variant=\"ghost\"\n              onClick={() => updateAttributes({ align: \"center\" })}\n            >\n              <AlignCenter className=\"size-4\" />\n            </Button>\n            <Button\n              size=\"icon\"\n              className={cn(\n                \"size-7\",\n                node.attrs.align === \"right\" && \"bg-accent\"\n              )}\n              variant=\"ghost\"\n              onClick={() => updateAttributes({ align: \"right\" })}\n            >\n              <AlignRight className=\"size-4\" />\n            </Button>\n            <Separator orientation=\"vertical\" className=\"h-[20px]\" />\n            <DropdownMenu open={openedMore} onOpenChange={setOpenedMore}>\n              <DropdownMenuTrigger asChild>\n                <Button size=\"icon\" className=\"size-7\" variant=\"ghost\">\n                  <MoreVertical className=\"size-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent\n                align=\"start\"\n                alignOffset={-90}\n                className=\"mt-1 text-sm\"\n              >\n                <DropdownMenuItem onClick={() => setEditingCaption(true)}>\n                  <Edit className=\"mr-2 size-4\" /> Edit Caption\n                </DropdownMenuItem>\n                <DropdownMenuSub>\n                  <DropdownMenuSubTrigger>\n                    <ImageIcon className=\"mr-2 size-4\" /> Replace Image\n                  </DropdownMenuSubTrigger>\n                  <DropdownMenuSubContent className=\"p-2 w-fit min-w-52\">\n                    <div className=\"space-y-4\">\n                      <div>\n                        <p className=\"mb-2 text-xs font-medium\">Upload Image</p>\n                        <input\n                          ref={fileInputRef}\n                          type=\"file\"\n                          accept=\"image/*\"\n                          onChange={handleFileChange}\n                          className=\"hidden\"\n                          id=\"replace-image-upload\"\n                        />\n                        <label\n                          htmlFor=\"replace-image-upload\"\n                          className=\"flex w-full cursor-pointer items-center justify-center gap-2 rounded-md border-2 border-dashed p-4 hover:bg-accent\"\n                        >\n                          {uploading ? (\n                            <>\n                              <Loader2 className=\"h-4 w-4 animate-spin\" />\n                              <span>Uploading...</span>\n                            </>\n                          ) : (\n                            <>\n                              <ImageIcon className=\"h-4 w-4\" />\n                              <span>Choose Image</span>\n                            </>\n                          )}\n                        </label>\n                        {error && (\n                          <p className=\"mt-2 text-xs text-destructive\">\n                            {error}\n                          </p>\n                        )}\n                      </div>\n\n                      <div>\n                        <p className=\"mb-2 text-xs font-medium\">Or use URL</p>\n                        <div className=\"space-y-2\">\n                          <Input\n                            value={imageUrl}\n                            onChange={(e) => setImageUrl(e.target.value)}\n                            placeholder=\"Enter image URL...\"\n                            className=\"text-xs\"\n                          />\n                          <Button\n                            onClick={handleImageUrlSubmit}\n                            className=\"w-full\"\n                            disabled={!imageUrl}\n                            size=\"sm\"\n                          >\n                            Replace with URL\n                          </Button>\n                        </div>\n                      </div>\n\n                      <div>\n                        <p className=\"mb-2 text-xs font-medium\">Alt Text</p>\n                        <Input\n                          value={altText}\n                          onChange={(e) => setAltText(e.target.value)}\n                          placeholder=\"Alt text (optional)\"\n                          className=\"text-xs\"\n                        />\n                      </div>\n                    </div>\n                  </DropdownMenuSubContent>\n                </DropdownMenuSub>\n                <DropdownMenuItem\n                  onClick={() => {\n                    const aspectRatio = node.attrs.aspectRatio;\n                    if (aspectRatio) {\n                      const parentWidth =\n                        nodeRef.current?.parentElement?.offsetWidth ?? 0;\n                      updateAttributes({\n                        width: parentWidth,\n                        height: parentWidth / aspectRatio,\n                      });\n                    }\n                  }}\n                >\n                  <Maximize className=\"mr-2 size-4\" /> Full Width\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem\n                  className=\"text-destructive focus:text-destructive\"\n                  onClick={deleteNode}\n                >\n                  <Trash className=\"mr-2 size-4\" /> Delete Image\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        )}\n      </div>\n    </NodeViewWrapper>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/tiptap/extensions/image.tsx"
    },
    {
      "path": "registry/basic/components/extensions/image-placeholder.tsx",
      "content": "\"use client\";\n/* eslint-disable */\n// @ts-nocheck\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n\tNODE_HANDLES_SELECTED_STYLE_CLASSNAME,\n\tisValidUrl,\n} from \"@/lib/tiptap-utils\";\nimport {\n\ttype CommandProps,\n\tNode,\n\ttype NodeViewProps,\n\tNodeViewWrapper,\n\tReactNodeViewRenderer,\n\tmergeAttributes,\n} from \"@tiptap/react\";\nimport { Image, Link, Upload, Loader2, X } from \"lucide-react\";\nimport { type FormEvent, useState } from \"react\";\nimport { useImageUpload } from \"@/hooks/use-image-upload\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface ImagePlaceholderOptions {\n\tHTMLAttributes: Record<string, any>;\n\tonUpload?: (url: string) => void;\n\tonError?: (error: string) => void;\n}\n\ndeclare module \"@tiptap/core\" {\n\tinterface Commands<ReturnType> {\n\t\timagePlaceholder: {\n\t\t\t/**\n\t\t\t * Inserts an image placeholder\n\t\t\t */\n\t\t\tinsertImagePlaceholder: () => ReturnType;\n\t\t};\n\t}\n}\n\nexport const ImagePlaceholder = Node.create<ImagePlaceholderOptions>({\n\tname: \"image-placeholder\",\n\n\taddOptions() {\n\t\treturn {\n\t\t\tHTMLAttributes: {},\n\t\t\tonUpload: () => {},\n\t\t\tonError: () => {},\n\t\t};\n\t},\n\n\tgroup: \"block\",\n\n\tparseHTML() {\n\t\treturn [{ tag: `div[data-type=\"${this.name}\"]` }];\n\t},\n\n\trenderHTML({ HTMLAttributes }) {\n\t\treturn [\"div\", mergeAttributes(HTMLAttributes)];\n\t},\n\n\taddNodeView() {\n\t\treturn ReactNodeViewRenderer(ImagePlaceholderComponent, {\n\t\t\tclassName: NODE_HANDLES_SELECTED_STYLE_CLASSNAME,\n\t\t});\n\t},\n\n\taddCommands() {\n\t\treturn {\n\t\t\tinsertImagePlaceholder: () => (props: CommandProps) => {\n\t\t\t\treturn props.commands.insertContent({\n\t\t\t\t\ttype: \"image-placeholder\",\n\t\t\t\t});\n\t\t\t},\n\t\t};\n\t},\n});\n\nfunction ImagePlaceholderComponent(props: NodeViewProps) {\n\tconst { editor, extension, selected } = props;\n\tconst [isExpanded, setIsExpanded] = useState(false);\n\tconst [activeTab, setActiveTab] = useState<'upload' | 'url'>('upload');\n\tconst [url, setUrl] = useState(\"\");\n\tconst [altText, setAltText] = useState(\"\");\n\tconst [urlError, setUrlError] = useState(false);\n\tconst [isDragActive, setIsDragActive] = useState(false);\n\n\tconst {\n\t\tpreviewUrl,\n\t\tfileInputRef,\n\t\thandleFileChange,\n\t\thandleRemove,\n\t\tuploading,\n\t\terror,\n\t} = useImageUpload({\n\t\tonUpload: (imageUrl) => {\n\t\t\teditor.chain().focus().setImage({ \n\t\t\t\tsrc: imageUrl,\n\t\t\t\talt: altText || fileInputRef.current?.files?.[0]?.name\n\t\t\t}).run();\n\t\t\thandleRemove();\n\t\t\tsetIsExpanded(false);\n\t\t},\n\t});\n\n\tconst handleDragEnter = (e: React.DragEvent<HTMLDivElement>) => {\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\t\tsetIsDragActive(true);\n\t};\n\n\tconst handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\t\tsetIsDragActive(false);\n\t};\n\n\tconst handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\t};\n\n\tconst handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\t\tsetIsDragActive(false);\n\n\t\tconst file = e.dataTransfer.files[0];\n\t\tif (file) {\n\t\t\tconst input = fileInputRef.current;\n\t\t\tif (input) {\n\t\t\t\tconst dataTransfer = new DataTransfer();\n\t\t\t\tdataTransfer.items.add(file);\n\t\t\t\tinput.files = dataTransfer.files;\n\t\t\t\thandleFileChange({ target: input } as any);\n\t\t\t}\n\t\t}\n\t};\n\n\tconst handleInsertEmbed = (e: FormEvent) => {\n\t\te.preventDefault();\n\t\tconst valid = isValidUrl(url);\n\t\tif (!valid) {\n\t\t\tsetUrlError(true);\n\t\t\treturn;\n\t\t}\n\t\tif (url) {\n\t\t\teditor.chain().focus().setImage({ src: url, alt: altText }).run();\n\t\t\tsetIsExpanded(false);\n\t\t\tsetUrl(\"\");\n\t\t\tsetAltText(\"\");\n\t\t}\n\t};\n\n\treturn (\n\t\t<NodeViewWrapper className=\"w-full\">\n\t\t\t<div className=\"relative\">\n\t\t\t\t{!isExpanded ? (\n\t\t\t\t\t<div\n\t\t\t\t\t\tonClick={() => setIsExpanded(true)}\n\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\"group relative flex cursor-pointer flex-col items-center gap-4 rounded-lg border-2 border-dashed p-8 transition-all hover:bg-accent\",\n\t\t\t\t\t\t\tselected && \"border-primary bg-primary/5\",\n\t\t\t\t\t\t\tisDragActive && \"border-primary bg-primary/5\",\n\t\t\t\t\t\t\terror && \"border-destructive bg-destructive/5\"\n\t\t\t\t\t\t)}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"rounded-full bg-background p-4 shadow-sm transition-colors group-hover:bg-accent\">\n\t\t\t\t\t\t\t<Image className=\"h-6 w-6\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t<p className=\"text-sm font-medium\">Click to upload or drag and drop</p>\n\t\t\t\t\t\t\t<p className=\"text-xs text-muted-foreground\">\n\t\t\t\t\t\t\t\tSVG, PNG, JPG or GIF\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<div className=\"rounded-lg border bg-card p-4 shadow-sm\">\n\t\t\t\t\t\t<div className=\"mb-4 flex items-center justify-between\">\n\t\t\t\t\t\t\t<h3 className=\"text-lg font-semibold\">Add Image</h3>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\t\tonClick={() => setIsExpanded(false)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<X className=\"h-4 w-4\" />\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<Tabs value={activeTab} onValueChange={(v: any) => setActiveTab(v)} className=\"w-full\">\n\t\t\t\t\t\t\t<TabsList className=\"grid w-full grid-cols-2\">\n\t\t\t\t\t\t\t\t<TabsTrigger value=\"upload\">\n\t\t\t\t\t\t\t\t\t<Upload className=\"mr-2 h-4 w-4\" />\n\t\t\t\t\t\t\t\t\tUpload\n\t\t\t\t\t\t\t\t</TabsTrigger>\n\t\t\t\t\t\t\t\t<TabsTrigger value=\"url\">\n\t\t\t\t\t\t\t\t\t<Link className=\"mr-2 h-4 w-4\" />\n\t\t\t\t\t\t\t\t\tURL\n\t\t\t\t\t\t\t\t</TabsTrigger>\n\t\t\t\t\t\t\t</TabsList>\n\n\t\t\t\t\t\t\t<TabsContent value=\"upload\">\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tonDragEnter={handleDragEnter}\n\t\t\t\t\t\t\t\t\tonDragLeave={handleDragLeave}\n\t\t\t\t\t\t\t\t\tonDragOver={handleDragOver}\n\t\t\t\t\t\t\t\t\tonDrop={handleDrop}\n\t\t\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\t\t\"my-4 rounded-lg border-2 border-dashed p-8 text-center transition-colors\",\n\t\t\t\t\t\t\t\t\t\tisDragActive && \"border-primary bg-primary/10\",\n\t\t\t\t\t\t\t\t\t\terror && \"border-destructive bg-destructive/10\"\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{previewUrl ? (\n\t\t\t\t\t\t\t\t\t\t<div className=\"space-y-4\">\n\t\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\t\tsrc={previewUrl}\n\t\t\t\t\t\t\t\t\t\t\t\talt=\"Preview\"\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"mx-auto max-h-[200px] rounded-lg object-cover\"\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"space-y-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={altText}\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setAltText(e.target.value)}\n\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Alt text (optional)\"\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex justify-end gap-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={handleRemove}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={uploading}\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tRemove\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Button disabled={uploading}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{uploading && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tUpload\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\t\tref={fileInputRef}\n\t\t\t\t\t\t\t\t\t\t\t\ttype=\"file\"\n\t\t\t\t\t\t\t\t\t\t\t\taccept=\"image/*\"\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={handleFileChange}\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"hidden\"\n\t\t\t\t\t\t\t\t\t\t\t\tid=\"image-upload\"\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t<label\n\t\t\t\t\t\t\t\t\t\t\t\thtmlFor=\"image-upload\"\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex cursor-pointer flex-col items-center gap-4\"\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<Upload className=\"h-8 w-8 text-muted-foreground\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"text-sm font-medium\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tClick to upload or drag and drop\n\t\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"text-xs text-muted-foreground\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSVG, PNG, JPG or GIF\n\t\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t{error && (\n\t\t\t\t\t\t\t\t\t\t<p className=\"mt-2 text-sm text-destructive\">{error}</p>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</TabsContent>\n\n\t\t\t\t\t\t\t<TabsContent value=\"url\">\n\t\t\t\t\t\t\t\t<div className=\"space-y-4 py-4\">\n\t\t\t\t\t\t\t\t\t<div className=\"space-y-2\">\n\t\t\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\t\t\tvalue={url}\n\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetUrl(e.target.value);\n\t\t\t\t\t\t\t\t\t\t\t\tif (urlError) setUrlError(false);\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Enter image URL...\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t{urlError && (\n\t\t\t\t\t\t\t\t\t\t\t<p className=\"text-xs text-destructive\">\n\t\t\t\t\t\t\t\t\t\t\t\tPlease enter a valid URL\n\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"space-y-2\">\n\t\t\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\t\t\tvalue={altText}\n\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setAltText(e.target.value)}\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Alt text (optional)\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tonClick={handleInsertEmbed}\n\t\t\t\t\t\t\t\t\t\tclassName=\"w-full\"\n\t\t\t\t\t\t\t\t\t\tdisabled={!url}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tAdd Image\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</TabsContent>\n\t\t\t\t\t\t</Tabs>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</NodeViewWrapper>\n\t);\n}\n",
      "type": "registry:component",
      "target": "components/tiptap/extensions/image-placeholder.tsx"
    },
    {
      "path": "registry/basic/components/extensions/search-and-replace.tsx",
      "content": "/* eslint-disable */\n// @ts-nocheck\nimport { type Editor as CoreEditor, Extension, type Range } from \"@tiptap/core\";\nimport type { Node as PMNode } from \"@tiptap/pm/model\";\nimport { Plugin, PluginKey } from \"@tiptap/pm/state\";\nimport { Decoration, DecorationSet, type EditorView } from \"@tiptap/pm/view\";\n\ndeclare module \"@tiptap/core\" {\n\tinterface Commands<ReturnType> {\n\t\tsearch: {\n\t\t\t/**\n\t\t\t * @description Set search term in extension.\n\t\t\t */\n\t\t\tsetSearchTerm: (searchTerm: string) => ReturnType;\n\t\t\t/**\n\t\t\t * @description Set replace term in extension.\n\t\t\t */\n\t\t\tsetReplaceTerm: (replaceTerm: string) => ReturnType;\n\t\t\t/**\n\t\t\t * @description Replace first instance of search result with given replace term.\n\t\t\t */\n\t\t\treplace: () => ReturnType;\n\t\t\t/**\n\t\t\t * @description Replace all instances of search result with given replace term.\n\t\t\t */\n\t\t\treplaceAll: () => ReturnType;\n\t\t\t/**\n\t\t\t * @description Select the next search result.\n\t\t\t */\n\t\t\tselectNextResult: () => ReturnType;\n\t\t\t/**\n\t\t\t * @description Select the previous search result.\n\t\t\t */\n\t\t\tselectPreviousResult: () => ReturnType;\n\t\t\t/**\n\t\t\t * @description Set case sensitivity in extension.\n\t\t\t */\n\t\t\tsetCaseSensitive: (caseSensitive: boolean) => ReturnType;\n\t\t};\n\t}\n}\n\ninterface TextNodeWithPosition {\n\ttext: string;\n\tpos: number;\n}\n\nconst getRegex = (\n\tsearchString: string,\n\tdisableRegex: boolean,\n\tcaseSensitive: boolean,\n): RegExp => {\n\tconst escapedString = disableRegex\n\t\t? searchString.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\")\n\t\t: searchString;\n\treturn new RegExp(escapedString, caseSensitive ? \"gu\" : \"gui\");\n};\n\ninterface ProcessedSearches {\n\tdecorationsToReturn: DecorationSet;\n\tresults: Range[];\n}\n\nfunction processSearches(\n\tdoc: PMNode,\n\tsearchTerm: RegExp,\n\tselectedResultIndex: number,\n\tsearchResultClass: string,\n\tselectedResultClass: string,\n): ProcessedSearches {\n\tconst decorations: Decoration[] = [];\n\tconst results: Range[] = [];\n\tconst textNodesWithPosition: TextNodeWithPosition[] = [];\n\n\tif (!searchTerm) {\n\t\treturn { decorationsToReturn: DecorationSet.empty, results: [] };\n\t}\n\n\tdoc.descendants((node, pos) => {\n\t\tif (node.isText) {\n\t\t\ttextNodesWithPosition.push({ text: node.text || \"\", pos });\n\t\t}\n\t});\n\n\tfor (const { text, pos } of textNodesWithPosition) {\n\t\tconst matches = Array.from(text.matchAll(searchTerm)).filter(\n\t\t\t([matchText]) => matchText.trim(),\n\t\t);\n\n\t\tfor (const match of matches) {\n\t\t\tif (match.index !== undefined) {\n\t\t\t\tresults.push({\n\t\t\t\t\tfrom: pos + match.index,\n\t\t\t\t\tto: pos + match.index + match[0].length,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (let i = 0; i < results.length; i++) {\n\t\tconst { from, to } = results[i];\n\t\tdecorations.push(\n\t\t\tDecoration.inline(from, to, {\n\t\t\t\tclass:\n\t\t\t\t\tselectedResultIndex === i ? selectedResultClass : searchResultClass,\n\t\t\t}),\n\t\t);\n\t}\n\n\treturn {\n\t\tdecorationsToReturn: DecorationSet.create(doc, decorations),\n\t\tresults,\n\t};\n}\n\nconst replace = (\n\treplaceTerm: string,\n\tresults: Range[],\n\t{ state, dispatch }: any,\n) => {\n\tconst firstResult = results[0];\n\n\tif (!firstResult) {\n\t\treturn;\n\t}\n\n\tconst { from, to } = results[0];\n\n\tif (dispatch) {\n\t\tdispatch(state.tr.insertText(replaceTerm, from, to));\n\t}\n};\n\nconst rebaseNextResult = (\n\treplaceTerm: string,\n\tindex: number,\n\tlastOffset: number,\n\tresults: Range[],\n): [number, Range[]] | null => {\n\tconst nextIndex = index + 1;\n\n\tif (!results[nextIndex]) {\n\t\treturn null;\n\t}\n\n\tconst { from: currentFrom, to: currentTo } = results[index];\n\n\tconst offset = currentTo - currentFrom - replaceTerm.length + lastOffset;\n\n\tconst { from, to } = results[nextIndex];\n\n\tresults[nextIndex] = {\n\t\tto: to - offset,\n\t\tfrom: from - offset,\n\t};\n\n\treturn [offset, results];\n};\n\nconst replaceAll = (\n\treplaceTerm: string,\n\tresults: Range[],\n\t{ tr, dispatch }: { tr: any; dispatch: any },\n) => {\n\tif (!results.length) {\n\t\treturn;\n\t}\n\n\tlet offset = 0;\n\n\tfor (let i = 0; i < results.length; i++) {\n\t\tconst { from, to } = results[i];\n\t\ttr.insertText(replaceTerm, from, to);\n\t\tconst rebaseResponse = rebaseNextResult(replaceTerm, i, offset, results);\n\n\t\tif (rebaseResponse) {\n\t\t\toffset = rebaseResponse[0];\n\t\t}\n\t}\n\n\tdispatch(tr);\n};\n\nconst selectNext = (editor: CoreEditor) => {\n\tconst { results } = editor.storage\n\t\t.searchAndReplace as SearchAndReplaceStorage;\n\n\tif (!results.length) {\n\t\treturn;\n\t}\n\n\tconst { selectedResult } = editor.storage.searchAndReplace;\n\n\tif (selectedResult >= results.length - 1) {\n\t\teditor.storage.searchAndReplace.selectedResult = 0;\n\t} else {\n\t\teditor.storage.searchAndReplace.selectedResult += 1;\n\t}\n\n\tconst { from } = results[editor.storage.searchAndReplace.selectedResult];\n\n\tconst view: EditorView | undefined = editor.view;\n\n\tif (view) {\n\t\tview\n\t\t\t.domAtPos(from)\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t// @ts-ignore\n\t\t\t.node.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\n\t}\n};\n\nconst selectPrevious = (editor: CoreEditor) => {\n\tconst { results } = editor.storage.searchAndReplace;\n\n\tif (!results.length) {\n\t\treturn;\n\t}\n\n\tconst { selectedResult } = editor.storage.searchAndReplace;\n\n\tif (selectedResult <= 0) {\n\t\teditor.storage.searchAndReplace.selectedResult = results.length - 1;\n\t} else {\n\t\teditor.storage.searchAndReplace.selectedResult -= 1;\n\t}\n\n\tconst { from } = results[editor.storage.searchAndReplace.selectedResult];\n\n\tconst view: EditorView | undefined = editor.view;\n\n\tif (view) {\n\t\tview\n\t\t\t.domAtPos(from)\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t// @ts-ignore\n\t\t\t.node.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\n\t}\n};\n\nexport const searchAndReplacePluginKey = new PluginKey(\n\t\"searchAndReplacePlugin\",\n);\n\nexport interface SearchAndReplaceOptions {\n\tsearchResultClass: string;\n\tselectedResultClass: string;\n\tdisableRegex: boolean;\n}\n\nexport interface SearchAndReplaceStorage {\n\tsearchTerm: string;\n\treplaceTerm: string;\n\tresults: Range[];\n\tlastSearchTerm: string;\n\tselectedResult: number;\n\tlastSelectedResult: number;\n\tcaseSensitive: boolean;\n\tlastCaseSensitiveState: boolean;\n}\n\nexport const SearchAndReplace = Extension.create<\n\tSearchAndReplaceOptions,\n\tSearchAndReplaceStorage\n>({\n\tname: \"searchAndReplace\",\n\n\taddOptions() {\n\t\treturn {\n\t\t\tsearchResultClass: \" bg-yellow-200\",\n\t\t\tselectedResultClass: \"bg-yellow-500\",\n\t\t\tdisableRegex: true,\n\t\t};\n\t},\n\n\taddStorage() {\n\t\treturn {\n\t\t\tsearchTerm: \"\",\n\t\t\treplaceTerm: \"\",\n\t\t\tresults: [],\n\t\t\tlastSearchTerm: \"\",\n\t\t\tselectedResult: 0,\n\t\t\tlastSelectedResult: 0,\n\t\t\tcaseSensitive: false,\n\t\t\tlastCaseSensitiveState: false,\n\t\t};\n\t},\n\n\taddCommands() {\n\t\treturn {\n\t\t\tsetSearchTerm:\n\t\t\t\t(searchTerm: string) =>\n\t\t\t\t({ editor }) => {\n\t\t\t\t\teditor.storage.searchAndReplace.searchTerm = searchTerm;\n\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\tsetReplaceTerm:\n\t\t\t\t(replaceTerm: string) =>\n\t\t\t\t({ editor }) => {\n\t\t\t\t\teditor.storage.searchAndReplace.replaceTerm = replaceTerm;\n\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\treplace:\n\t\t\t\t() =>\n\t\t\t\t({ editor, state, dispatch }) => {\n\t\t\t\t\tconst { replaceTerm, results } = editor.storage.searchAndReplace;\n\n\t\t\t\t\treplace(replaceTerm, results, { state, dispatch });\n\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\treplaceAll:\n\t\t\t\t() =>\n\t\t\t\t({ editor, tr, dispatch }) => {\n\t\t\t\t\tconst { replaceTerm, results } = editor.storage.searchAndReplace;\n\n\t\t\t\t\treplaceAll(replaceTerm, results, { tr, dispatch });\n\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\tselectNextResult:\n\t\t\t\t() =>\n\t\t\t\t({ editor }) => {\n\t\t\t\t\tselectNext(editor);\n\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\tselectPreviousResult:\n\t\t\t\t() =>\n\t\t\t\t({ editor }) => {\n\t\t\t\t\tselectPrevious(editor);\n\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\tsetCaseSensitive:\n\t\t\t\t(caseSensitive: boolean) =>\n\t\t\t\t({ editor }) => {\n\t\t\t\t\teditor.storage.searchAndReplace.caseSensitive = caseSensitive;\n\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t};\n\t},\n\n\taddProseMirrorPlugins() {\n\t\tconst editor = this.editor;\n\t\tconst { searchResultClass, selectedResultClass, disableRegex } =\n\t\t\tthis.options;\n\n\t\tconst setLastSearchTerm = (t: string) => {\n\t\t\teditor.storage.searchAndReplace.lastSearchTerm = t;\n\t\t};\n\n\t\tconst setLastSelectedResult = (r: number) => {\n\t\t\teditor.storage.searchAndReplace.lastSelectedResult = r;\n\t\t};\n\n\t\tconst setLastCaseSensitiveState = (s: boolean) => {\n\t\t\teditor.storage.searchAndReplace.lastCaseSensitiveState = s;\n\t\t};\n\n\t\treturn [\n\t\t\tnew Plugin({\n\t\t\t\tkey: searchAndReplacePluginKey,\n\t\t\t\tstate: {\n\t\t\t\t\tinit: () => DecorationSet.empty,\n\t\t\t\t\tapply({ doc, docChanged }, oldState) {\n\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\tsearchTerm,\n\t\t\t\t\t\t\tselectedResult,\n\t\t\t\t\t\t\tlastSearchTerm,\n\t\t\t\t\t\t\tlastSelectedResult,\n\t\t\t\t\t\t\tcaseSensitive,\n\t\t\t\t\t\t\tlastCaseSensitiveState,\n\t\t\t\t\t\t} = editor.storage.searchAndReplace as SearchAndReplaceStorage;\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!docChanged &&\n\t\t\t\t\t\t\tlastSearchTerm === searchTerm &&\n\t\t\t\t\t\t\tselectedResult === lastSelectedResult &&\n\t\t\t\t\t\t\tlastCaseSensitiveState === caseSensitive\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn oldState;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsetLastSearchTerm(searchTerm);\n\t\t\t\t\t\tsetLastSelectedResult(selectedResult);\n\t\t\t\t\t\tsetLastCaseSensitiveState(caseSensitive);\n\n\t\t\t\t\t\tif (!searchTerm) {\n\t\t\t\t\t\t\teditor.storage.searchAndReplace.selectedResult = 0;\n\t\t\t\t\t\t\teditor.storage.searchAndReplace.results = [];\n\t\t\t\t\t\t\treturn DecorationSet.empty;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst { decorationsToReturn, results } = processSearches(\n\t\t\t\t\t\t\tdoc,\n\t\t\t\t\t\t\tgetRegex(searchTerm, disableRegex, caseSensitive),\n\t\t\t\t\t\t\tselectedResult,\n\t\t\t\t\t\t\tsearchResultClass,\n\t\t\t\t\t\t\tselectedResultClass,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\teditor.storage.searchAndReplace.results = results;\n\n\t\t\t\t\t\tif (selectedResult > results.length) {\n\t\t\t\t\t\t\teditor.storage.searchAndReplace.selectedResult = 1;\n\t\t\t\t\t\t\teditor.commands.selectPreviousResult();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn decorationsToReturn;\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tprops: {\n\t\t\t\t\tdecorations(state) {\n\t\t\t\t\t\treturn this.getState(state);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}),\n\t\t];\n\t},\n});\n\nexport default SearchAndReplace;\n",
      "type": "registry:component",
      "target": "components/tiptap/extensions/search-and-replace.tsx"
    },
    {
      "path": "registry/basic/components/toolbars/editor-toolbar.tsx",
      "content": "import { Separator } from \"@/components/ui/separator\";\r\nimport { ScrollArea, ScrollBar } from \"@/components/ui/scroll-area\";\r\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\r\nimport { ToolbarProvider } from \"./toolbar-provider\";\r\nimport { Editor } from \"@tiptap/core\";\r\nimport { UndoToolbar } from \"./undo\";\r\nimport { RedoToolbar } from \"./redo\";\r\nimport { HeadingsToolbar } from \"./headings\";\r\nimport { BlockquoteToolbar } from \"./blockquote\";\r\nimport { CodeToolbar } from \"./code\";\r\nimport { BoldToolbar } from \"./bold\";\r\nimport { ItalicToolbar } from \"./italic\";\r\nimport { UnderlineToolbar } from \"./underline\";\r\nimport { StrikeThroughToolbar } from \"./strikethrough\";\r\nimport { LinkToolbar } from \"./link\";\r\nimport { BulletListToolbar } from \"./bullet-list\";\r\nimport { OrderedListToolbar } from \"./ordered-list\";\r\nimport { HorizontalRuleToolbar } from \"./horizontal-rule\";\r\nimport { AlignmentTooolbar } from \"./alignment\";\r\nimport { ImagePlaceholderToolbar } from \"./image-placeholder-toolbar\";\r\nimport { ColorHighlightToolbar } from \"./color-and-highlight\";\r\nimport { SearchAndReplaceToolbar } from \"./search-and-replace-toolbar\";\r\nimport { CodeBlockToolbar } from \"./code-block\";\r\n\r\nexport const EditorToolbar = ({ editor }: { editor: Editor }) => {\r\n  return (\r\n    <div className=\"sticky top-0 z-20 w-full border-b bg-background hidden sm:block\">\r\n      <ToolbarProvider editor={editor}>\r\n        <TooltipProvider>\r\n          <ScrollArea className=\"h-fit py-0.5\">\r\n            <div>\r\n              <div className=\"flex items-center gap-1 px-2\">\r\n                {/* History Group */}\r\n                <UndoToolbar />\r\n                <RedoToolbar />\r\n                <Separator orientation=\"vertical\" className=\"mx-1 h-7\" />\r\n\r\n                {/* Text Structure Group */}\r\n                <HeadingsToolbar />\r\n                <BlockquoteToolbar />\r\n                <CodeToolbar />\r\n                <CodeBlockToolbar/>\r\n                <Separator orientation=\"vertical\" className=\"mx-1 h-7\" />\r\n\r\n                {/* Basic Formatting Group */}\r\n                <BoldToolbar />\r\n                <ItalicToolbar />\r\n                <UnderlineToolbar />\r\n                <StrikeThroughToolbar />\r\n                <LinkToolbar />\r\n                <Separator orientation=\"vertical\" className=\"mx-1 h-7\" />\r\n\r\n                {/* Lists & Structure Group */}\r\n                <BulletListToolbar />\r\n                <OrderedListToolbar />\r\n                <HorizontalRuleToolbar />\r\n                <Separator orientation=\"vertical\" className=\"mx-1 h-7\" />\r\n\r\n                {/* Alignment Group */}\r\n                <AlignmentTooolbar />\r\n                <Separator orientation=\"vertical\" className=\"mx-1 h-7\" />\r\n\r\n                {/* Media & Styling Group */}\r\n                <ImagePlaceholderToolbar />\r\n                <ColorHighlightToolbar />\r\n                <Separator orientation=\"vertical\" className=\"mx-1 h-7\" />\r\n\r\n                <div className=\"flex-1\" />\r\n\r\n                {/* Utility Group */}\r\n                <SearchAndReplaceToolbar />\r\n              </div>\r\n            </div>\r\n            <ScrollBar className=\"hidden\" orientation=\"horizontal\" />\r\n          </ScrollArea>\r\n        </TooltipProvider>\r\n      </ToolbarProvider>\r\n    </div>\r\n  );\r\n};\r\n",
      "type": "registry:component",
      "target": "components/tiptap/toolbars/editor-toolbar.tsx"
    },
    {
      "path": "registry/basic/components/toolbars/color-and-highlight.tsx",
      "content": "\"use client\";\n/* eslint-disable */\n// @ts-nocheck\nimport { Button } from \"@/components/ui/button\";\nimport {\n\tPopover,\n\tPopoverContent,\n\tPopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { useToolbar } from \"./toolbar-provider\";\nimport type { Extension } from \"@tiptap/core\";\nimport type { ColorOptions } from \"@tiptap/extension-color\";\nimport type { HighlightOptions } from \"@tiptap/extension-highlight\";\nimport { CheckIcon, ChevronDownIcon } from \"lucide-react\";\nimport { useMediaQuery } from \"@/hooks/use-media-querry\";\nimport { MobileToolbarGroup, MobileToolbarItem } from \"./mobile-toolbar-group\";\n\ntype TextStylingExtensions =\n\t| Extension<ColorOptions, any>\n\t| Extension<HighlightOptions, any>;\n\nconst TEXT_COLORS = [\n\t{ name: \"Default\", color: \"var(--editor-text-default)\" },\n\t{ name: \"Gray\", color: \"var(--editor-text-gray)\" },\n\t{ name: \"Brown\", color: \"var(--editor-text-brown)\" },\n\t{ name: \"Orange\", color: \"var(--editor-text-orange)\" },\n\t{ name: \"Yellow\", color: \"var(--editor-text-yellow)\" },\n\t{ name: \"Green\", color: \"var(--editor-text-green)\" },\n\t{ name: \"Blue\", color: \"var(--editor-text-blue)\" },\n\t{ name: \"Purple\", color: \"var(--editor-text-purple)\" },\n\t{ name: \"Pink\", color: \"var(--editor-text-pink)\" },\n\t{ name: \"Red\", color: \"var(--editor-text-red)\" },\n];\n\nconst HIGHLIGHT_COLORS = [\n\t{ name: \"Default\", color: \"var(--editor-highlight-default)\" },\n\t{ name: \"Gray\", color: \"var(--editor-highlight-gray)\" },\n\t{ name: \"Brown\", color: \"var(--editor-highlight-brown)\" },\n\t{ name: \"Orange\", color: \"var(--editor-highlight-orange)\" },\n\t{ name: \"Yellow\", color: \"var(--editor-highlight-yellow)\" },\n\t{ name: \"Green\", color: \"var(--editor-highlight-green)\" },\n\t{ name: \"Blue\", color: \"var(--editor-highlight-blue)\" },\n\t{ name: \"Purple\", color: \"var(--editor-highlight-purple)\" },\n\t{ name: \"Pink\", color: \"var(--editor-highlight-pink)\" },\n\t{ name: \"Red\", color: \"var(--editor-highlight-red)\" },\n];\n\ninterface ColorHighlightButtonProps {\n\tname: string;\n\tcolor: string;\n\tisActive: boolean;\n\tonClick: () => void;\n\tisHighlight?: boolean;\n}\n\nconst ColorHighlightButton = ({\n\tname,\n\tcolor,\n\tisActive,\n\tonClick,\n\tisHighlight,\n}: ColorHighlightButtonProps) => (\n\t<button\n\t\tonClick={onClick}\n\t\tclassName=\"flex w-full items-center justify-between rounded-sm px-2 py-1 text-sm hover:bg-gray-3\"\n\t\ttype=\"button\"\n\t>\n\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t<div\n\t\t\t\tclassName=\"rounded-sm border px-1 py-px font-medium\"\n\t\t\t\tstyle={isHighlight ? { backgroundColor: color } : { color }}\n\t\t\t>\n\t\t\t\tA\n\t\t\t</div>\n\t\t\t<span>{name}</span>\n\t\t</div>\n\t\t{isActive && <CheckIcon className=\"h-4 w-4\" />}\n\t</button>\n);\n\nexport const ColorHighlightToolbar = () => {\n\tconst { editor } = useToolbar();\n\tconst isMobile = useMediaQuery(\"(max-width: 640px)\");\n\n\tconst currentColor = editor?.getAttributes(\"textStyle\").color;\n\tconst currentHighlight = editor?.getAttributes(\"highlight\").color;\n\n\tconst handleSetColor = (color: string) => {\n\t\teditor\n\t\t\t?.chain()\n\t\t\t.focus()\n\t\t\t.setColor(color === currentColor ? \"\" : color)\n\t\t\t.run();\n\t};\n\n\tconst handleSetHighlight = (color: string) => {\n\t\teditor\n\t\t\t?.chain()\n\t\t\t.focus()\n\t\t\t.setHighlight(color === currentHighlight ? { color: \"\" } : { color })\n\t\t\t.run();\n\t};\n\n\tconst isDisabled =\n\t\t!editor?.can().chain().setHighlight().run() ||\n\t\t!editor?.can().chain().setColor(\"\").run();\n\n\tif (isMobile) {\n\t\treturn (\n\t\t\t<div className=\"flex gap-1\">\n\t\t\t\t<MobileToolbarGroup label=\"Color\">\n\t\t\t\t\t{TEXT_COLORS.map(({ name, color }) => (\n\t\t\t\t\t\t<MobileToolbarItem\n\t\t\t\t\t\t\tkey={name}\n\t\t\t\t\t\t\tonClick={() => handleSetColor(color)}\n\t\t\t\t\t\t\tactive={currentColor === color}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t\t\t\t\t<div className=\"rounded-sm border px-2\" style={{ color }}>\n\t\t\t\t\t\t\t\t\tA\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<span>{name}</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</MobileToolbarItem>\n\t\t\t\t\t))}\n\t\t\t\t</MobileToolbarGroup>\n\n\t\t\t\t<MobileToolbarGroup label=\"Highlight\">\n\t\t\t\t\t{HIGHLIGHT_COLORS.map(({ name, color }) => (\n\t\t\t\t\t\t<MobileToolbarItem\n\t\t\t\t\t\t\tkey={name}\n\t\t\t\t\t\t\tonClick={() => handleSetHighlight(color)}\n\t\t\t\t\t\t\tactive={currentHighlight === color}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName=\"rounded-sm border px-2\"\n\t\t\t\t\t\t\t\t\tstyle={{ backgroundColor: color }}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tA\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<span>{name}</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</MobileToolbarItem>\n\t\t\t\t\t))}\n\t\t\t\t</MobileToolbarGroup>\n\t\t\t</div>\n\t\t);\n\t}\n\n\treturn (\n\t\t<Popover>\n\t\t\t<div className=\"relative h-full\">\n\t\t\t\t<Tooltip>\n\t\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t\t<PopoverTrigger disabled={isDisabled} asChild>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tcolor: currentColor,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tclassName={cn(\"h-8 w-14 p-0 font-normal\")}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<span className=\"text-md\">A</span>\n\t\t\t\t\t\t\t\t<ChevronDownIcon className=\"ml-2 h-4 w-4\" />\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</PopoverTrigger>\n\t\t\t\t\t</TooltipTrigger>\n\t\t\t\t\t<TooltipContent>Text Color & Highlight</TooltipContent>\n\t\t\t\t</Tooltip>\n\n\t\t\t\t<PopoverContent align=\"start\" className=\"w-56 p-1 dark:bg-gray-2\">\n\t\t\t\t\t<ScrollArea className=\"max-h-80 overflow-y-auto pr-2\">\n\t\t\t\t\t\t<div className=\"mb-2.5 mt-2 px-2 text-xs text-gray-11\">Color</div>\n\t\t\t\t\t\t{TEXT_COLORS.map(({ name, color }) => (\n\t\t\t\t\t\t\t<ColorHighlightButton\n\t\t\t\t\t\t\t\tkey={name}\n\t\t\t\t\t\t\t\tname={name}\n\t\t\t\t\t\t\t\tcolor={color}\n\t\t\t\t\t\t\t\tisActive={currentColor === color}\n\t\t\t\t\t\t\t\tonClick={() => handleSetColor(color)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t))}\n\n\t\t\t\t\t\t<Separator className=\"my-3\" />\n\n\t\t\t\t\t\t<div className=\"mb-2.5 w-full px-2 pr-3 text-xs text-gray-11\">\n\t\t\t\t\t\t\tBackground\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{HIGHLIGHT_COLORS.map(({ name, color }) => (\n\t\t\t\t\t\t\t<ColorHighlightButton\n\t\t\t\t\t\t\t\tkey={name}\n\t\t\t\t\t\t\t\tname={name}\n\t\t\t\t\t\t\t\tcolor={color}\n\t\t\t\t\t\t\t\tisActive={currentHighlight === color}\n\t\t\t\t\t\t\t\tonClick={() => handleSetHighlight(color)}\n\t\t\t\t\t\t\t\tisHighlight\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</ScrollArea>\n\t\t\t\t</PopoverContent>\n\t\t\t</div>\n\t\t</Popover>\n\t);\n};\n",
      "type": "registry:component",
      "target": "components/tiptap/toolbars/color-and-highlight.tsx"
    },
    {
      "path": "registry/basic/components/toolbars/bold.tsx",
      "content": "\"use client\";\n\nimport { BoldIcon } from \"lucide-react\";\nimport React from \"react\";\n\nimport { Button, type ButtonProps } from \"@/components/ui/button\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { useToolbar } from \"./toolbar-provider\";\n// import type { Extension } from \"@tiptap/core\";\n// import type { StarterKitOptions } from \"@tiptap/starter-kit\";\n\n// type StarterKitExtensions = Extension<StarterKitOptions>;\n\nconst BoldToolbar = React.forwardRef<HTMLButtonElement, ButtonProps>(\n\t({ className, onClick, children, ...props }, ref) => {\n\t\tconst { editor } = useToolbar();\n\t\treturn (\n\t\t\t<Tooltip>\n\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\"h-8 w-8 p-0 sm:h-9 sm:w-9\",\n\t\t\t\t\t\t\teditor?.isActive(\"bold\") && \"bg-accent\",\n\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\teditor?.chain().focus().toggleBold().run();\n\t\t\t\t\t\t\tonClick?.(e);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdisabled={!editor?.can().chain().focus().toggleBold().run()}\n\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\t{...props}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children ?? <BoldIcon className=\"h-4 w-4\" />}\n\t\t\t\t\t</Button>\n\t\t\t\t</TooltipTrigger>\n\t\t\t\t<TooltipContent>\n\t\t\t\t\t<span>Bold</span>\n\t\t\t\t\t<span className=\"ml-1 text-xs text-gray-11\">(cmd + b)</span>\n\t\t\t\t</TooltipContent>\n\t\t\t</Tooltip>\n\t\t);\n\t},\n);\n\nBoldToolbar.displayName = \"BoldToolbar\";\n\nexport { BoldToolbar };\n",
      "type": "registry:component",
      "target": "components/tiptap/toolbars/bold.tsx"
    },
    {
      "path": "registry/basic/components/toolbars/link.tsx",
      "content": "\"use client\";\r\n/* eslint-disable */\r\n// @ts-nocheck\r\nimport { PopoverClose } from \"@radix-ui/react-popover\";\r\nimport { Trash2, X } from \"lucide-react\";\r\n\r\nimport React, { type FormEvent } from \"react\";\r\n\r\nimport { Button, type ButtonProps } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport {\r\n\tTooltip,\r\n\tTooltipContent,\r\n\tTooltipTrigger,\r\n} from \"@/components/ui/tooltip\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nimport {\r\n\tPopover,\r\n\tPopoverContent,\r\n\tPopoverTrigger,\r\n} from \"@/components/ui/popover\";\r\nimport { useToolbar } from \"./toolbar-provider\";\r\nimport { getUrlFromString } from \"@/lib/tiptap-utils\";\r\n\r\nconst LinkToolbar = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n\t({ className, ...props }, ref) => {\r\n\t\tconst { editor } = useToolbar();\r\n\t\tconst [link, setLink] = React.useState(\"\");\r\n\r\n\t\tconst handleSubmit = (e: FormEvent) => {\r\n\t\t\te.preventDefault();\r\n\t\t\tconst url = getUrlFromString(link);\r\n\t\t\turl && editor?.chain().focus().setLink({ href: url }).run();\r\n\t\t};\r\n\r\n\t\tReact.useEffect(() => {\r\n\t\t\tsetLink(editor?.getAttributes(\"link\").href ?? \"\");\r\n\t\t}, [editor]);\r\n\r\n\t\treturn (\r\n\t\t\t<Popover>\r\n\t\t\t\t<Tooltip>\r\n\t\t\t\t\t<TooltipTrigger asChild>\r\n\t\t\t\t\t\t<PopoverTrigger\r\n\t\t\t\t\t\t\tdisabled={!editor?.can().chain().setLink({ href: \"\" }).run()}\r\n\t\t\t\t\t\t\tasChild\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tvariant=\"ghost\"\r\n\t\t\t\t\t\t\t\tsize=\"sm\"\r\n\t\t\t\t\t\t\t\tclassName={cn(\r\n\t\t\t\t\t\t\t\t\t\"h-8 w-max px-3 font-normal\",\r\n\t\t\t\t\t\t\t\t\teditor?.isActive(\"link\") && \"bg-accent\",\r\n\t\t\t\t\t\t\t\t\tclassName,\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\tref={ref}\r\n\t\t\t\t\t\t\t\t{...props}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<p className=\"mr-2 text-base\">↗</p>\r\n\t\t\t\t\t\t\t\t<p className={\"underline decoration-gray-7 underline-offset-4\"}>\r\n\t\t\t\t\t\t\t\t\tLink\r\n\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</PopoverTrigger>\r\n\t\t\t\t\t</TooltipTrigger>\r\n\t\t\t\t\t<TooltipContent>\r\n\t\t\t\t\t\t<span>Link</span>\r\n\t\t\t\t\t</TooltipContent>\r\n\t\t\t\t</Tooltip>\r\n\r\n\t\t\t\t<PopoverContent\r\n\t\t\t\t\tonCloseAutoFocus={(e) => {\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tasChild\r\n\t\t\t\t\tclassName=\"relative px-3 py-2.5\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<div className=\"relative\">\r\n\t\t\t\t\t\t<PopoverClose className=\"absolute right-3 top-3\">\r\n\t\t\t\t\t\t\t<X className=\"h-4 w-4\" />\r\n\t\t\t\t\t\t</PopoverClose>\r\n\t\t\t\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t\t\t\t<Label>Link</Label>\r\n\t\t\t\t\t\t\t<p className=\"text-sm text-gray-11\">\r\n\t\t\t\t\t\t\t\tAttach a link to the selected text\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t<div className=\"mt-3 flex flex-col items-end justify-end gap-3\">\r\n\t\t\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\t\t\tvalue={link}\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\t\t\t\t\tsetLink(e.target.value);\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\tclassName=\"w-full\"\r\n\t\t\t\t\t\t\t\t\tplaceholder=\"https://example.com\"\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<div className=\"flex items-center gap-3\">\r\n\t\t\t\t\t\t\t\t\t{editor?.getAttributes(\"link\").href && (\r\n\t\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\t\ttype=\"reset\"\r\n\t\t\t\t\t\t\t\t\t\t\tsize=\"sm\"\r\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"h-8 text-gray-11\"\r\n\t\t\t\t\t\t\t\t\t\t\tvariant=\"ghost\"\r\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\t\t\teditor?.chain().focus().unsetLink().run();\r\n\t\t\t\t\t\t\t\t\t\t\t\tsetLink(\"\");\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<Trash2 className=\"mr-2 h-4 w-4\" />\r\n\t\t\t\t\t\t\t\t\t\t\tRemove\r\n\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t<Button size=\"sm\" className=\"h-8\">\r\n\t\t\t\t\t\t\t\t\t\t{editor?.getAttributes(\"link\").href ? \"Update\" : \"Confirm\"}\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</PopoverContent>\r\n\t\t\t</Popover>\r\n\t\t);\r\n\t},\r\n);\r\n\r\nLinkToolbar.displayName = \"LinkToolbar\";\r\n\r\nexport { LinkToolbar };",
      "type": "registry:component",
      "target": "components/tiptap/toolbars/link.tsx"
    },
    {
      "path": "registry/basic/components/toolbars/search-and-replace-toolbar.tsx",
      "content": "\"use client\";\n/* eslint-disable */\n// @ts-nocheck\nimport { ArrowLeftIcon, ArrowRightIcon, X, Repeat } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n\tPopover,\n\tPopoverContent,\n\tPopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { useToolbar } from \"./toolbar-provider\";\nimport { type SearchAndReplaceStorage } from \"../extensions/search-and-replace\";\n\nexport function SearchAndReplaceToolbar() {\n\tconst { editor } = useToolbar();\n\n\tconst [open, setOpen] = useState(false);\n\tconst [replacing, setReplacing] = useState(false);\n\tconst [searchText, setSearchText] = useState(\"\");\n\tconst [replaceText, setReplaceText] = useState(\"\");\n\tconst [checked, setChecked] = useState(false);\n\n\tconst results = editor?.storage?.searchAndReplace\n\t\t.results as SearchAndReplaceStorage[\"results\"];\n\tconst selectedResult = editor?.storage?.searchAndReplace\n\t\t.selectedResult as SearchAndReplaceStorage[\"selectedResult\"];\n\n\tconst replace = () => editor?.chain().replace().run();\n\tconst replaceAll = () => editor?.chain().replaceAll().run();\n\tconst selectNext = () => editor?.chain().selectNextResult().run();\n\tconst selectPrevious = () => editor?.chain().selectPreviousResult().run();\n\n\tuseEffect(() => {\n\t\teditor?.chain().setSearchTerm(searchText).run();\n\t}, [searchText, editor]);\n\n\tuseEffect(() => {\n\t\teditor?.chain().setReplaceTerm(replaceText).run();\n\t}, [replaceText, editor]);\n\n\tuseEffect(() => {\n\t\teditor?.chain().setCaseSensitive(checked).run();\n\t}, [checked, editor]);\n\n\tuseEffect(() => {\n\t\tif (!open) {\n\t\t\tsetReplaceText(\"\");\n\t\t\tsetSearchText(\"\");\n\t\t\tsetReplacing(false);\n\t\t}\n\t}, [open]);\n\n\treturn (\n\t\t<Popover open={open}>\n\t\t\t<Tooltip>\n\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t<PopoverTrigger disabled={!editor} asChild>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tsetOpen(!open);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tclassName={cn(\"h-8 w-max px-3 font-normal\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Repeat className=\"mr-2 h-4 w-4\" />\n\t\t\t\t\t\t\t<p>Search & Replace</p>\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</PopoverTrigger>\n\t\t\t\t</TooltipTrigger>\n\t\t\t\t<TooltipContent>\n\t\t\t\t\t<span>Search & Replace</span>\n\t\t\t\t</TooltipContent>\n\t\t\t</Tooltip>\n\n\t\t\t<PopoverContent\n\t\t\t\talign=\"end\"\n\t\t\t\tonCloseAutoFocus={(e) => {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t}}\n\t\t\t\tonEscapeKeyDown={() => {\n\t\t\t\t\tsetOpen(false);\n\t\t\t\t}}\n\t\t\t\tclassName=\"relative flex w-[400px] px-3 py-2.5\"\n\t\t\t>\n\t\t\t\t{!replacing ? (\n\t\t\t\t\t<div className={cn(\"relative flex gap-1.5 items-center\")}>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tvalue={searchText}\n\t\t\t\t\t\t\tclassName=\" w-48\"\n\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\tsetSearchText(e.target.value);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tplaceholder=\"Search...\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t{results?.length === 0 ? selectedResult : selectedResult + 1}/\n\t\t\t\t\t\t\t{results?.length}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tonClick={selectPrevious}\n\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\tclassName=\"size-7\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<ArrowLeftIcon className=\"size-4\" />\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tonClick={selectNext}\n\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\tclassName=\"size-7\"\n\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<ArrowRightIcon className=\"h-4 w-4\" />\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Separator orientation=\"vertical\" className=\"h-7 mx-0.5\" />\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tsetReplacing(true);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\tclassName=\"size-7\"\n\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Repeat className=\"h-4 w-4\" />\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tsetOpen(false);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\tclassName=\"size-7\"\n\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<X className=\"h-4 w-4\" />\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<div className={cn(\"relative w-full\")}>\n\t\t\t\t\t\t<X\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tsetOpen(false);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tclassName=\"absolute right-3 top-3 h-4 w-4 cursor-pointer\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div className=\"flex w-full items-center gap-3\">\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\t\tclassName=\"size-7 rounded-full\"\n\t\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tsetReplacing(false);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<ArrowLeftIcon className=\"h-4 w-4\" />\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<h2 className=\"text-sm font-medium\">Search and replace</h2>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"my-2 w-full\">\n\t\t\t\t\t\t\t<div className=\"mb-3\">\n\t\t\t\t\t\t\t\t<Label className=\"mb-1 text-xs text-gray-11\">Search</Label>\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\tvalue={searchText}\n\t\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t\tsetSearchText(e.target.value);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tplaceholder=\"Search...\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t{results?.length === 0 ? selectedResult : selectedResult + 1}/\n\t\t\t\t\t\t\t\t{results?.length}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"mb-2\">\n\t\t\t\t\t\t\t\t<Label className=\"mb-1 text-xs text-gray-11\">\n\t\t\t\t\t\t\t\t\tReplace with\n\t\t\t\t\t\t\t\t</Label>\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\tclassName=\"w-full\"\n\t\t\t\t\t\t\t\t\tvalue={replaceText}\n\t\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t\tsetReplaceText(e.target.value);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tplaceholder=\"Replace...\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"mt-3 flex items-center space-x-2\">\n\t\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\t\tchecked={checked}\n\t\t\t\t\t\t\t\t\tonCheckedChange={(checked: boolean) => {\n\t\t\t\t\t\t\t\t\t\tsetChecked(checked);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tid=\"match_case\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<Label\n\t\t\t\t\t\t\t\t\thtmlFor=\"match_case\"\n\t\t\t\t\t\t\t\t\tclassName=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tMatch case\n\t\t\t\t\t\t\t\t</Label>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"actions mt-6 flex items-center justify-between\">\n\t\t\t\t\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tonClick={selectPrevious}\n\t\t\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\t\t\tclassName=\"h-7 w-7\"\n\t\t\t\t\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ArrowLeftIcon className=\"h-4 w-4\" />\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tonClick={selectNext}\n\t\t\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\t\t\tclassName=\"h-7 w-7\"\n\t\t\t\t\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ArrowRightIcon className=\"h-4 w-4\" />\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div className=\"main-actions flex items-center gap-2\">\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\t\t\tclassName=\"h-7 px-3 text-xs\"\n\t\t\t\t\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\t\t\t\t\tonClick={replaceAll}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tReplace All\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tonClick={replace}\n\t\t\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\t\t\tclassName=\"h-7 px-3 text-xs\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tReplace\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</PopoverContent>\n\t\t</Popover>\n\t);\n}\n",
      "type": "registry:component",
      "target": "components/tiptap/toolbars/search-and-replace-toolbar.tsx"
    },
    {
      "path": "registry/basic/components/toolbars/code-block.tsx",
      "content": "\"use client\";\n\nimport { Code } from \"lucide-react\";\nimport React from \"react\";\n\nimport { Button, type ButtonProps } from \"@/components/ui/button\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { useToolbar } from \"./toolbar-provider\";\n\nconst CodeBlockToolbar = React.forwardRef<HTMLButtonElement, ButtonProps>(\n\t({ className, onClick, children, ...props }, ref) => {\n\t\tconst { editor } = useToolbar();\n\t\treturn (\n\t\t\t<Tooltip>\n\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\"h-8 w-8 p-0 sm:h-9 sm:w-9\",\n\t\t\t\t\t\t\teditor?.isActive(\"codeBlock\") && \"bg-accent\",\n\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\teditor?.chain().focus().toggleCodeBlock().run();\n\t\t\t\t\t\t\tonClick?.(e);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdisabled={!editor?.can().chain().focus().toggleCodeBlock().run()}\n\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\t{...props}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children ?? <Code className=\"h-4 w-4\" />}\n\t\t\t\t\t</Button>\n\t\t\t\t</TooltipTrigger>\n\t\t\t\t<TooltipContent>\n\t\t\t\t\t<span>Code Block</span>\n\t\t\t\t</TooltipContent>\n\t\t\t</Tooltip>\n\t\t);\n\t},\n);\n\nCodeBlockToolbar.displayName = \"CodeBlockToolbar\";\n\nexport { CodeBlockToolbar };\n",
      "type": "registry:component",
      "target": "components/tiptap/toolbars/code-block.tsx"
    },
    {
      "path": "registry/basic/components/toolbars/blockquote.tsx",
      "content": "\"use client\";\n\nimport { TextQuote } from \"lucide-react\";\nimport React from \"react\";\n\nimport { Button, type ButtonProps } from \"@/components/ui/button\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { useToolbar } from \"./toolbar-provider\";\n\nconst BlockquoteToolbar = React.forwardRef<HTMLButtonElement, ButtonProps>(\n\t({ className, onClick, children, ...props }, ref) => {\n\t\tconst { editor } = useToolbar();\n\t\treturn (\n\t\t\t<Tooltip>\n\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\"h-8 w-8 p-0 sm:h-9 sm:w-9\",\n\t\t\t\t\t\t\teditor?.isActive(\"blockquote\") && \"bg-accent\",\n\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\teditor?.chain().focus().toggleBlockquote().run();\n\t\t\t\t\t\t\tonClick?.(e);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdisabled={!editor?.can().chain().focus().toggleBlockquote().run()}\n\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\t{...props}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children ?? <TextQuote className=\"h-4 w-4\" />}\n\t\t\t\t\t</Button>\n\t\t\t\t</TooltipTrigger>\n\t\t\t\t<TooltipContent>\n\t\t\t\t\t<span>Blockquote</span>\n\t\t\t\t</TooltipContent>\n\t\t\t</Tooltip>\n\t\t);\n\t},\n);\n\nBlockquoteToolbar.displayName = \"BlockquoteToolbar\";\n\nexport { BlockquoteToolbar };\n",
      "type": "registry:component",
      "target": "components/tiptap/toolbars/blockquote.tsx"
    },
    {
      "path": "registry/basic/components/toolbars/code.tsx",
      "content": "\"use client\";\n\nimport { Code2 } from \"lucide-react\";\nimport React from \"react\";\n\nimport { Button, type ButtonProps } from \"@/components/ui/button\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { useToolbar } from \"./toolbar-provider\";\n\nconst CodeToolbar = React.forwardRef<HTMLButtonElement, ButtonProps>(\n\t({ className, onClick, children, ...props }, ref) => {\n\t\tconst { editor } = useToolbar();\n\t\treturn (\n\t\t\t<Tooltip>\n\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\"h-8 w-8 p-0 sm:h-9 sm:w-9\",\n\t\t\t\t\t\t\teditor?.isActive(\"code\") && \"bg-accent\",\n\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\teditor?.chain().focus().toggleCode().run();\n\t\t\t\t\t\t\tonClick?.(e);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdisabled={!editor?.can().chain().focus().toggleCode().run()}\n\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\t{...props}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children ?? <Code2 className=\"h-4 w-4\" />}\n\t\t\t\t\t</Button>\n\t\t\t\t</TooltipTrigger>\n\t\t\t\t<TooltipContent>\n\t\t\t\t\t<span>Code</span>\n\t\t\t\t</TooltipContent>\n\t\t\t</Tooltip>\n\t\t);\n\t},\n);\n\nCodeToolbar.displayName = \"CodeToolbar\";\n\nexport { CodeToolbar };\n",
      "type": "registry:component",
      "target": "components/tiptap/toolbars/code.tsx"
    },
    {
      "path": "registry/basic/components/toolbars/hard-break.tsx",
      "content": "\"use client\";\n\nimport { WrapText } from \"lucide-react\";\nimport React from \"react\";\n\nimport { Button, type ButtonProps } from \"@/components/ui/button\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { useToolbar } from \"./toolbar-provider\";\n\nconst HardBreakToolbar = React.forwardRef<HTMLButtonElement, ButtonProps>(\n\t({ className, onClick, children, ...props }, ref) => {\n\t\tconst { editor } = useToolbar();\n\t\treturn (\n\t\t\t<Tooltip>\n\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\tclassName={cn(\"h-8 w-8 p-0 sm:h-9 sm:w-9\", className)}\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\teditor?.chain().focus().setHardBreak().run();\n\t\t\t\t\t\t\tonClick?.(e);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\t{...props}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children ?? <WrapText className=\"h-4 w-4\" />}\n\t\t\t\t\t</Button>\n\t\t\t\t</TooltipTrigger>\n\t\t\t\t<TooltipContent>\n\t\t\t\t\t<span>Hard break</span>\n\t\t\t\t</TooltipContent>\n\t\t\t</Tooltip>\n\t\t);\n\t},\n);\n\nHardBreakToolbar.displayName = \"HardBreakToolbar\";\n\nexport { HardBreakToolbar };\n",
      "type": "registry:component",
      "target": "components/tiptap/toolbars/hard-break.tsx"
    },
    {
      "path": "registry/basic/components/toolbars/horizontal-rule.tsx",
      "content": "\"use client\";\n\nimport { SeparatorHorizontal } from \"lucide-react\";\nimport React from \"react\";\n\nimport { Button, type ButtonProps } from \"@/components/ui/button\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { useToolbar } from \"./toolbar-provider\";\n\nconst HorizontalRuleToolbar = React.forwardRef<HTMLButtonElement, ButtonProps>(\n\t({ className, onClick, children, ...props }, ref) => {\n\t\tconst { editor } = useToolbar();\n\t\treturn (\n\t\t\t<Tooltip>\n\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\tclassName={cn(\"h-8 w-8 p-0 sm:h-9 sm:w-9\", className)}\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\teditor?.chain().focus().setHorizontalRule().run();\n\t\t\t\t\t\t\tonClick?.(e);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\t{...props}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children ?? <SeparatorHorizontal className=\"h-4 w-4\" />}\n\t\t\t\t\t</Button>\n\t\t\t\t</TooltipTrigger>\n\t\t\t\t<TooltipContent>\n\t\t\t\t\t<span>Horizontal Rule</span>\n\t\t\t\t</TooltipContent>\n\t\t\t</Tooltip>\n\t\t);\n\t},\n);\n\nHorizontalRuleToolbar.displayName = \"HorizontalRuleToolbar\";\n\nexport { HorizontalRuleToolbar };\n",
      "type": "registry:component",
      "target": "components/tiptap/toolbars/horizontal-rule.tsx"
    },
    {
      "path": "registry/basic/components/toolbars/image-placeholder-toolbar.tsx",
      "content": "\"use client\";\n\nimport { Image } from \"lucide-react\";\nimport React from \"react\";\n\nimport { Button, type ButtonProps } from \"@/components/ui/button\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { useToolbar } from \"./toolbar-provider\";\n\nconst ImagePlaceholderToolbar = React.forwardRef<\n\tHTMLButtonElement,\n\tButtonProps\n>(({ className, onClick, children, ...props }, ref) => {\n\tconst { editor } = useToolbar();\n\treturn (\n\t\t<Tooltip>\n\t\t\t<TooltipTrigger asChild>\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\"h-8 w-8 p-0 sm:h-9 sm:w-9\",\n\t\t\t\t\t\teditor?.isActive(\"image-placeholder\") && \"bg-accent\",\n\t\t\t\t\t\tclassName,\n\t\t\t\t\t)}\n\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\teditor?.chain().focus().insertImagePlaceholder().run();\n\t\t\t\t\t\tonClick?.(e);\n\t\t\t\t\t}}\n\t\t\t\t\tref={ref}\n\t\t\t\t\t{...props}\n\t\t\t\t>\n\t\t\t\t\t{children ?? <Image className=\"h-4 w-4\" />}\n\t\t\t\t</Button>\n\t\t\t</TooltipTrigger>\n\t\t\t<TooltipContent>\n\t\t\t\t<span>Image</span>\n\t\t\t</TooltipContent>\n\t\t</Tooltip>\n\t);\n});\n\nImagePlaceholderToolbar.displayName = \"ImagePlaceholderToolbar\";\n\nexport { ImagePlaceholderToolbar };\n",
      "type": "registry:component",
      "target": "components/tiptap/toolbars/image-placeholder-toolbar.tsx"
    },
    {
      "path": "registry/basic/components/toolbars/italic.tsx",
      "content": "\"use client\";\n\nimport { ItalicIcon } from \"lucide-react\";\nimport React from \"react\";\n\nimport { Button, type ButtonProps } from \"@/components/ui/button\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { useToolbar } from \"./toolbar-provider\";\n\nconst ItalicToolbar = React.forwardRef<HTMLButtonElement, ButtonProps>(\n\t({ className, onClick, children, ...props }, ref) => {\n\t\tconst { editor } = useToolbar();\n\t\treturn (\n\t\t\t<Tooltip>\n\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\"h-8 w-8 p-0 sm:h-9 sm:w-9\",\n\t\t\t\t\t\t\teditor?.isActive(\"italic\") && \"bg-accent\",\n\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\teditor?.chain().focus().toggleItalic().run();\n\t\t\t\t\t\t\tonClick?.(e);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdisabled={!editor?.can().chain().focus().toggleItalic().run()}\n\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\t{...props}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children ?? <ItalicIcon className=\"h-4 w-4\" />}\n\t\t\t\t\t</Button>\n\t\t\t\t</TooltipTrigger>\n\t\t\t\t<TooltipContent>\n\t\t\t\t\t<span>Italic</span>\n\t\t\t\t\t<span className=\"ml-1 text-xs text-gray-11\">(cmd + i)</span>\n\t\t\t\t</TooltipContent>\n\t\t\t</Tooltip>\n\t\t);\n\t},\n);\n\nItalicToolbar.displayName = \"ItalicToolbar\";\n\nexport { ItalicToolbar };\n",
      "type": "registry:component",
      "target": "components/tiptap/toolbars/italic.tsx"
    },
    {
      "path": "registry/basic/components/toolbars/ordered-list.tsx",
      "content": "\"use client\";\n\nimport { ListOrdered } from \"lucide-react\";\nimport React from \"react\";\n\nimport { Button, type ButtonProps } from \"@/components/ui/button\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { useToolbar } from \"./toolbar-provider\";\n\nconst OrderedListToolbar = React.forwardRef<HTMLButtonElement, ButtonProps>(\n\t({ className, onClick, children, ...props }, ref) => {\n\t\tconst { editor } = useToolbar();\n\t\treturn (\n\t\t\t<Tooltip>\n\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\"h-8 w-8 p-0 sm:h-9 sm:w-9\",\n\t\t\t\t\t\t\teditor?.isActive(\"orderedList\") && \"bg-accent\",\n\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\teditor?.chain().focus().toggleOrderedList().run();\n\t\t\t\t\t\t\tonClick?.(e);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdisabled={!editor?.can().chain().focus().toggleOrderedList().run()}\n\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\t{...props}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children ?? <ListOrdered className=\"h-4 w-4\" />}\n\t\t\t\t\t</Button>\n\t\t\t\t</TooltipTrigger>\n\t\t\t\t<TooltipContent>\n\t\t\t\t\t<span>Ordered list</span>\n\t\t\t\t</TooltipContent>\n\t\t\t</Tooltip>\n\t\t);\n\t},\n);\n\nOrderedListToolbar.displayName = \"OrderedListToolbar\";\n\nexport { OrderedListToolbar };\n",
      "type": "registry:component",
      "target": "components/tiptap/toolbars/ordered-list.tsx"
    },
    {
      "path": "registry/basic/components/toolbars/redo.tsx",
      "content": "\"use client\";\n\nimport { Redo2 } from \"lucide-react\";\nimport React from \"react\";\n\nimport { Button, type ButtonProps } from \"@/components/ui/button\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { useToolbar } from \"./toolbar-provider\";\n\nconst RedoToolbar = React.forwardRef<HTMLButtonElement, ButtonProps>(\n\t({ className, onClick, children, ...props }, ref) => {\n\t\tconst { editor } = useToolbar();\n\n\t\treturn (\n\t\t\t<Tooltip>\n\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\tclassName={cn(\"h-8 w-8 p-0 sm:h-9 sm:w-9\", className)}\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\teditor?.chain().focus().redo().run();\n\t\t\t\t\t\t\tonClick?.(e);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdisabled={!editor?.can().chain().focus().redo().run()}\n\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\t{...props}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children ?? <Redo2 className=\"h-4 w-4\" />}\n\t\t\t\t\t</Button>\n\t\t\t\t</TooltipTrigger>\n\t\t\t\t<TooltipContent>\n\t\t\t\t\t<span>Redo</span>\n\t\t\t\t</TooltipContent>\n\t\t\t</Tooltip>\n\t\t);\n\t},\n);\n\nRedoToolbar.displayName = \"RedoToolbar\";\n\nexport { RedoToolbar };\n",
      "type": "registry:component",
      "target": "components/tiptap/toolbars/redo.tsx"
    },
    {
      "path": "registry/basic/components/toolbars/strikethrough.tsx",
      "content": "\"use client\";\n\nimport { Strikethrough } from \"lucide-react\";\nimport React from \"react\";\n\nimport { Button, type ButtonProps } from \"@/components/ui/button\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { useToolbar } from \"./toolbar-provider\";\n\nconst StrikeThroughToolbar = React.forwardRef<HTMLButtonElement, ButtonProps>(\n\t({ className, onClick, children, ...props }, ref) => {\n\t\tconst { editor } = useToolbar();\n\t\treturn (\n\t\t\t<Tooltip>\n\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\"h-8 w-8 p-0 sm:h-9 sm:w-9\",\n\t\t\t\t\t\t\teditor?.isActive(\"strike\") && \"bg-accent\",\n\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\teditor?.chain().focus().toggleStrike().run();\n\t\t\t\t\t\t\tonClick?.(e);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdisabled={!editor?.can().chain().focus().toggleStrike().run()}\n\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\t{...props}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children ?? <Strikethrough className=\"h-4 w-4\" />}\n\t\t\t\t\t</Button>\n\t\t\t\t</TooltipTrigger>\n\t\t\t\t<TooltipContent>\n\t\t\t\t\t<span>Strikethrough</span>\n\t\t\t\t\t<span className=\"ml-1 text-xs text-gray-11\">(cmd + shift + x)</span>\n\t\t\t\t</TooltipContent>\n\t\t\t</Tooltip>\n\t\t);\n\t},\n);\n\nStrikeThroughToolbar.displayName = \"StrikeThroughToolbar\";\n\nexport { StrikeThroughToolbar };\n",
      "type": "registry:component",
      "target": "components/tiptap/toolbars/strikethrough.tsx"
    },
    {
      "path": "registry/basic/components/toolbars/undo.tsx",
      "content": "\"use client\";\r\n\r\nimport { Button, type ButtonProps } from \"@/components/ui/button\";\r\nimport {\r\n\tTooltip,\r\n\tTooltipContent,\r\n\tTooltipTrigger,\r\n} from \"@/components/ui/tooltip\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { useToolbar } from \"./toolbar-provider\";\r\nimport { Undo2 } from \"lucide-react\";\r\nimport React from \"react\";\r\n\r\nconst UndoToolbar = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n\t({ className, onClick, children, ...props }, ref) => {\r\n\t\tconst { editor } = useToolbar();\r\n\r\n\t\treturn (\r\n\t\t\t<Tooltip>\r\n\t\t\t\t<TooltipTrigger asChild>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tvariant=\"ghost\"\r\n\t\t\t\t\t\tsize=\"icon\"\r\n\t\t\t\t\t\tclassName={cn(\"h-8 w-8 p-0 sm:h-9 sm:w-9\", className)}\r\n\t\t\t\t\t\tonClick={(e) => {\r\n\t\t\t\t\t\t\teditor?.chain().focus().undo().run();\r\n\t\t\t\t\t\t\tonClick?.(e);\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tdisabled={!editor?.can().chain().focus().undo().run()}\r\n\t\t\t\t\t\tref={ref}\r\n\t\t\t\t\t\t{...props}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{children ?? <Undo2 className=\"h-4 w-4\" />}\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</TooltipTrigger>\r\n\t\t\t\t<TooltipContent>\r\n\t\t\t\t\t<span>Undo</span>\r\n\t\t\t\t</TooltipContent>\r\n\t\t\t</Tooltip>\r\n\t\t);\r\n\t},\r\n);\r\n\r\nUndoToolbar.displayName = \"UndoToolbar\";\r\n\r\nexport { UndoToolbar };\r\n\r\n",
      "type": "registry:component",
      "target": "components/tiptap/toolbars/undo.tsx"
    },
    {
      "path": "registry/basic/components/toolbars/bullet-list.tsx",
      "content": "\"use client\";\n\nimport { List } from \"lucide-react\";\nimport React from \"react\";\n\nimport { Button, type ButtonProps } from \"@/components/ui/button\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { useToolbar } from \"./toolbar-provider\";\n\nconst BulletListToolbar = React.forwardRef<HTMLButtonElement, ButtonProps>(\n\t({ className, onClick, children, ...props }, ref) => {\n\t\tconst { editor } = useToolbar();\n\n\t\treturn (\n\t\t\t<Tooltip>\n\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\"h-8 w-8 p-0 sm:h-9 sm:w-9\",\n\t\t\t\t\t\t\teditor?.isActive(\"bulletList\") && \"bg-accent\",\n\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\teditor?.chain().focus().toggleBulletList().run();\n\t\t\t\t\t\t\tonClick?.(e);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdisabled={!editor?.can().chain().focus().toggleBulletList().run()}\n\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\t{...props}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children ?? <List className=\"h-4 w-4\" />}\n\t\t\t\t\t</Button>\n\t\t\t\t</TooltipTrigger>\n\t\t\t\t<TooltipContent>\n\t\t\t\t\t<span>Bullet list</span>\n\t\t\t\t</TooltipContent>\n\t\t\t</Tooltip>\n\t\t);\n\t},\n);\n\nBulletListToolbar.displayName = \"BulletListToolbar\";\n\nexport { BulletListToolbar };\n",
      "type": "registry:component",
      "target": "components/tiptap/toolbars/bullet-list.tsx"
    },
    {
      "path": "registry/basic/components/toolbars/mobile-toolbar-group.tsx",
      "content": "\"use client\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { ChevronDown } from \"lucide-react\";\r\nimport React, { useState } from \"react\";\r\nimport {\r\n  Drawer,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerTitle,\r\n  DrawerTrigger,\r\n} from \"@/components/ui/drawer\";\r\n\r\ninterface MobileToolbarGroupProps {\r\n  label: string;\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nexport const MobileToolbarGroup = ({\r\n  label,\r\n  children,\r\n  className,\r\n}: MobileToolbarGroupProps) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const closeDrawer = () => setIsOpen(false);\r\n\r\n  return (\r\n    <Drawer open={isOpen} onOpenChange={setIsOpen}>\r\n      <DrawerTrigger asChild>\r\n        <Button\r\n          variant=\"ghost\"\r\n          size=\"sm\"\r\n          className={cn(\"h-8 w-max gap-1 px-3 font-normal\", className)}\r\n        >\r\n          {label}\r\n          <ChevronDown className=\"h-4 w-4\" />\r\n        </Button>\r\n      </DrawerTrigger>\r\n      <DrawerContent>\r\n        <DrawerHeader>\r\n          <DrawerTitle className=\"text-start\">{label}</DrawerTitle>\r\n        </DrawerHeader>\r\n        <div className=\"flex flex-col p-4\">\r\n          {React.Children.map(children, (child) =>\r\n            React.isValidElement(child)\r\n              ? React.cloneElement(child, { closeDrawer } as {\r\n                  closeDrawer: () => void;\r\n                })\r\n              : child,\r\n          )}\r\n        </div>\r\n      </DrawerContent>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport const MobileToolbarItem = ({\r\n  children,\r\n  active,\r\n  onClick,\r\n  closeDrawer,\r\n  ...props\r\n}: React.ButtonHTMLAttributes<HTMLButtonElement> & {\r\n  active?: boolean;\r\n  closeDrawer?: () => void;\r\n}) => (\r\n  <button\r\n    className={cn(\r\n      \"flex w-full items-center rounded-md px-4 py-2 text-sm transition-colors hover:bg-accent\",\r\n      active && \"bg-accent\",\r\n    )}\r\n    onClick={(e) => {\r\n      onClick?.(e);\r\n      setTimeout(() => {\r\n        closeDrawer?.();\r\n      }, 100);\r\n    }}\r\n    {...props}\r\n  >\r\n    {children}\r\n  </button>\r\n);\r\n",
      "type": "registry:component",
      "target": "components/tiptap/toolbars/mobile-toolbar-group.tsx"
    },
    {
      "path": "registry/basic/components/toolbars/toolbar-provider.tsx",
      "content": "\"use client\";\n\nimport type { Editor } from \"@tiptap/react\";\nimport React from \"react\";\n\nexport interface ToolbarContextProps {\n\teditor: Editor;\n}\n\nexport const ToolbarContext = React.createContext<ToolbarContextProps | null>(\n\tnull,\n);\n\ninterface ToolbarProviderProps {\n\teditor: Editor;\n\tchildren: React.ReactNode;\n}\n\nexport const ToolbarProvider = ({ editor, children }: ToolbarProviderProps) => {\n\treturn (\n\t\t<ToolbarContext.Provider value={{ editor }}>\n\t\t\t{children}\n\t\t</ToolbarContext.Provider>\n\t);\n};\n\nexport const useToolbar = () => {\n\tconst context = React.useContext(ToolbarContext);\n\n\tif (!context) {\n\t\tthrow new Error(\"useToolbar must be used within a ToolbarProvider\");\n\t}\n\n\treturn context;\n};\n",
      "type": "registry:component",
      "target": "components/tiptap/toolbars/toolbar-provider.tsx"
    },
    {
      "path": "registry/basic/components/toolbars/alignment.tsx",
      "content": "\"use client\";\r\n\r\nimport {\r\n  AlignCenter,\r\n  AlignJustify,\r\n  AlignLeft,\r\n  AlignRight,\r\n  Check,\r\n  ChevronDown,\r\n} from \"lucide-react\";\r\nimport { useMediaQuery } from \"@/hooks/use-media-querry\";\r\nimport { MobileToolbarGroup, MobileToolbarItem } from \"./mobile-toolbar-group\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuGroup,\r\n  DropdownMenuItem,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport {\r\n  Tooltip,\r\n  TooltipContent,\r\n  TooltipTrigger,\r\n} from \"@/components/ui/tooltip\";\r\nimport { useToolbar } from \"./toolbar-provider\";\r\n\r\nexport const AlignmentTooolbar = () => {\r\n  const { editor } = useToolbar();\r\n  const isMobile = useMediaQuery(\"(max-width: 640px)\");\r\n  const handleAlign = (value: string) => {\r\n    editor?.chain().focus().setTextAlign(value).run();\r\n  };\r\n\r\n  const isDisabled =\r\n    editor?.isActive(\"image\") ?? editor?.isActive(\"video\") ?? !editor ?? false;\r\n\r\n  const currentTextAlign = () => {\r\n    if (editor?.isActive({ textAlign: \"left\" })) {\r\n      return \"left\";\r\n    }\r\n    if (editor?.isActive({ textAlign: \"center\" })) {\r\n      return \"center\";\r\n    }\r\n    if (editor?.isActive({ textAlign: \"right\" })) {\r\n      return \"right\";\r\n    }\r\n    if (editor?.isActive({ textAlign: \"justify\" })) {\r\n      return \"justify\";\r\n    }\r\n\r\n    return \"left\";\r\n  };\r\n\r\n  const alignmentOptions = [\r\n    {\r\n      name: \"Left Align\",\r\n      value: \"left\",\r\n      icon: <AlignLeft className=\"h-4 w-4\" />,\r\n    },\r\n    {\r\n      name: \"Center Align\",\r\n      value: \"center\",\r\n      icon: <AlignCenter className=\"h-4 w-4\" />,\r\n    },\r\n    {\r\n      name: \"Right Align\",\r\n      value: \"right\",\r\n      icon: <AlignRight className=\"h-4 w-4\" />,\r\n    },\r\n    {\r\n      name: \"Justify Align\",\r\n      value: \"justify\",\r\n      icon: <AlignJustify className=\"h-4 w-4\" />,\r\n    },\r\n  ];\r\n\r\n  const findIndex = (value: string) => {\r\n    return alignmentOptions.findIndex((option) => option.value === value);\r\n  };\r\n\r\n  if (isMobile) {\r\n    return (\r\n      <MobileToolbarGroup \r\n        label={alignmentOptions[findIndex(currentTextAlign())]?.name ?? \"Left Align\"}\r\n      >\r\n        {alignmentOptions.map((option, index) => (\r\n          <MobileToolbarItem\r\n            key={index}\r\n            onClick={() => handleAlign(option.value)}\r\n            active={currentTextAlign() === option.value}\r\n          >\r\n            <span className=\"mr-2\">{option.icon}</span>\r\n            {option.name}\r\n          </MobileToolbarItem>\r\n        ))}\r\n      </MobileToolbarGroup>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <DropdownMenu>\r\n      <Tooltip>\r\n        <TooltipTrigger asChild>\r\n          <DropdownMenuTrigger disabled={isDisabled} asChild>\r\n            <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-max font-normal\">\r\n              <span className=\"mr-2\">\r\n                {alignmentOptions[findIndex(currentTextAlign())]?.icon}\r\n              </span>\r\n              {alignmentOptions[findIndex(currentTextAlign())]?.name}\r\n              <ChevronDown className=\"ml-2 h-4 w-4\" />\r\n            </Button>\r\n          </DropdownMenuTrigger>\r\n        </TooltipTrigger>\r\n        <TooltipContent>Text Alignment</TooltipContent>\r\n      </Tooltip>\r\n      <DropdownMenuContent\r\n        loop\r\n        onCloseAutoFocus={(e) => {\r\n          e.preventDefault();\r\n        }}\r\n      >\r\n        <DropdownMenuGroup className=\" w-40\">\r\n          {alignmentOptions.map((option, index) => (\r\n            <DropdownMenuItem\r\n              onSelect={() => {\r\n                handleAlign(option.value);\r\n              }}\r\n              key={index}\r\n            >\r\n              <span className=\"mr-2\">{option.icon}</span>\r\n              {option.name}\r\n\r\n              {option.value === currentTextAlign() && (\r\n                <Check className=\"ml-auto h-4 w-4\" />\r\n              )}\r\n            </DropdownMenuItem>\r\n          ))}\r\n        </DropdownMenuGroup>\r\n      </DropdownMenuContent>\r\n    </DropdownMenu>\r\n  );\r\n};\r\n",
      "type": "registry:component",
      "target": "components/tiptap/toolbars/alignment.tsx"
    },
    {
      "path": "registry/basic/components/toolbars/headings.tsx",
      "content": "\"use client\";\r\n\r\nimport React from \"react\";\r\nimport { ChevronDown } from \"lucide-react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Tooltip,\r\n  TooltipContent,\r\n  TooltipTrigger,\r\n} from \"@/components/ui/tooltip\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { useToolbar } from \"./toolbar-provider\";\r\nimport { useMediaQuery } from \"@/hooks/use-media-querry\";\r\nimport { MobileToolbarGroup, MobileToolbarItem } from \"./mobile-toolbar-group\";\r\n\r\nconst levels = [1, 2, 3, 4] as const;\r\n\r\nexport const HeadingsToolbar = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ButtonHTMLAttributes<HTMLButtonElement>\r\n>(({ className, ...props }, ref) => {\r\n  const { editor } = useToolbar();\r\n  const isMobile = useMediaQuery(\"(max-width: 640px)\");\r\n  const activeLevel = levels.find((level) =>\r\n    editor?.isActive(\"heading\", { level })\r\n  );\r\n\r\n  if (isMobile) {\r\n    return (\r\n      <MobileToolbarGroup label={activeLevel ? `H${activeLevel}` : \"Normal\"}>\r\n        <MobileToolbarItem\r\n          onClick={() => editor?.chain().focus().setParagraph().run()}\r\n          active={!editor?.isActive(\"heading\")}\r\n        >\r\n          Normal\r\n        </MobileToolbarItem>\r\n        {levels.map((level) => (\r\n          <MobileToolbarItem\r\n            key={level}\r\n            onClick={() => editor?.chain().focus().toggleHeading({ level }).run()}\r\n            active={editor?.isActive(\"heading\", { level })}\r\n          >\r\n            H{level}\r\n          </MobileToolbarItem>\r\n        ))}\r\n      </MobileToolbarGroup>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Tooltip>\r\n      <TooltipTrigger asChild>\r\n        <DropdownMenu>\r\n          <DropdownMenuTrigger asChild>\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"sm\"\r\n              className={cn(\r\n                \"h-8 w-max gap-1 px-3 font-normal\",\r\n                editor?.isActive(\"heading\") && \"bg-accent\",\r\n                className\r\n              )}\r\n              ref={ref}\r\n              {...props}\r\n            >\r\n              {activeLevel ? `H${activeLevel}` : \"Normal\"}\r\n              <ChevronDown className=\"h-4 w-4\" />\r\n            </Button>\r\n          </DropdownMenuTrigger>\r\n          <DropdownMenuContent align=\"start\">\r\n            <DropdownMenuItem\r\n              onClick={() => editor?.chain().focus().setParagraph().run()}\r\n              className={cn(\r\n                \"flex items-center gap-2 h-fit\",\r\n                !editor?.isActive(\"heading\") && \"bg-accent\"\r\n              )}\r\n            >\r\n              Normal\r\n            </DropdownMenuItem>\r\n            {levels.map((level) => (\r\n              <DropdownMenuItem\r\n                key={level}\r\n                onClick={() =>\r\n                  editor?.chain().focus().toggleHeading({ level }).run()\r\n                }\r\n                className={cn(\r\n                  \"flex items-center gap-2\",\r\n                  editor?.isActive(\"heading\", { level }) && \"bg-accent\"\r\n                )}\r\n              >\r\n                H{level}\r\n              </DropdownMenuItem>\r\n            ))}\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n      </TooltipTrigger>\r\n      <TooltipContent>\r\n        <span>Headings</span>\r\n      </TooltipContent>\r\n    </Tooltip>\r\n  );\r\n});\r\n\r\nHeadingsToolbar.displayName = \"HeadingsToolbar\";",
      "type": "registry:component",
      "target": "components/tiptap/toolbars/headings.tsx"
    },
    {
      "path": "registry/basic/components/toolbars/underline.tsx",
      "content": "\"use client\";\r\n\r\nimport { UnderlineIcon } from \"lucide-react\";\r\nimport React from \"react\";\r\n\r\nimport { Button, type ButtonProps } from \"@/components/ui/button\";\r\nimport {\r\n\tTooltip,\r\n\tTooltipContent,\r\n\tTooltipTrigger,\r\n} from \"@/components/ui/tooltip\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { useToolbar } from \"./toolbar-provider\";\r\n\r\nconst UnderlineToolbar = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n\t({ className, onClick, children, ...props }, ref) => {\r\n\t\tconst { editor } = useToolbar();\r\n\t\treturn (\r\n\t\t\t<Tooltip>\r\n\t\t\t\t<TooltipTrigger asChild>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tvariant=\"ghost\"\r\n\t\t\t\t\t\tsize=\"icon\"\r\n\t\t\t\t\t\tclassName={cn(\r\n\t\t\t\t\t\t\t\"h-8 w-8 p-0 sm:h-9 sm:w-9\",\r\n\t\t\t\t\t\t\teditor?.isActive(\"underline\") && \"bg-accent\",\r\n\t\t\t\t\t\t\tclassName,\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\tonClick={(e) => {\r\n\t\t\t\t\t\t\teditor?.chain().focus().toggleUnderline().run();\r\n\t\t\t\t\t\t\tonClick?.(e);\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tdisabled={!editor?.can().chain().focus().toggleUnderline().run()}\r\n\t\t\t\t\t\tref={ref}\r\n\t\t\t\t\t\t{...props}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{children ?? <UnderlineIcon className=\"h-4 w-4\" />}\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</TooltipTrigger>\r\n\t\t\t\t<TooltipContent>\r\n\t\t\t\t\t<span>Underline</span>\r\n\t\t\t\t\t<span className=\"ml-1 text-xs text-gray-11\">(cmd + u)</span>\r\n\t\t\t\t</TooltipContent>\r\n\t\t\t</Tooltip>\r\n\t\t);\r\n\t},\r\n);\r\n\r\nUnderlineToolbar.displayName = \"UnderlineToolbar\";\r\n\r\nexport { UnderlineToolbar };",
      "type": "registry:component",
      "target": "components/tiptap/toolbars/underline.tsx"
    },
    {
      "path": "registry/basic/hooks/use-debounce.ts",
      "content": "import { useState, useEffect } from \"react\";\r\n\r\nexport function useDebounce<T>(value: T, delay: number): T {\r\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  }, [value, delay]);\r\n\r\n  return debouncedValue;\r\n}\r\n",
      "type": "registry:hook",
      "target": "hooks/use-debounce.ts"
    },
    {
      "path": "registry/basic/hooks/use-image-upload.ts",
      "content": "import { useCallback, useEffect, useRef, useState } from \"react\";\n\ninterface UseImageUploadProps {\n  onUpload?: (url: string) => void;\n}\n\nexport function useImageUpload({ onUpload }: UseImageUploadProps = {}) {\n  const previewRef = useRef<string | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [previewUrl, setPreviewUrl] = useState<string | null>(null);\n  const [fileName, setFileName] = useState<string | null>(null);\n  const [uploading, setUploading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Dummy upload function that simulates a delay and returns the local preview URL\n  const dummyUpload = async (file: File, localUrl: string): Promise<string> => {\n    try {\n      setUploading(true);\n      // Simulate network delay\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      \n      // Simulate random upload errors (20% chance)\n      if (Math.random() < 0.2) {\n        throw new Error(\"Upload failed - This is a demo error\");\n      }\n      \n      setError(null);\n      // In a real implementation, this would be the URL from the server\n      return localUrl;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : \"Upload failed\";\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const handleThumbnailClick = useCallback(() => {\n    fileInputRef.current?.click();\n  }, []);\n\n  const handleFileChange = useCallback(\n    async (event: React.ChangeEvent<HTMLInputElement>) => {\n      const file = event.target.files?.[0];\n      if (file) {\n        setFileName(file.name);\n        const localUrl = URL.createObjectURL(file);\n        setPreviewUrl(localUrl);\n        previewRef.current = localUrl;\n\n        try {\n          const uploadedUrl = await dummyUpload(file, localUrl);\n          onUpload?.(uploadedUrl);\n        } catch (err) {\n          URL.revokeObjectURL(localUrl);\n          setPreviewUrl(null);\n          setFileName(null);\n          return console.error(err)\n        }\n      }\n    },\n    [onUpload]\n  );\n\n  const handleRemove = useCallback(() => {\n    if (previewUrl) {\n      URL.revokeObjectURL(previewUrl);\n    }\n    setPreviewUrl(null);\n    setFileName(null);\n    previewRef.current = null;\n    if (fileInputRef.current) {\n      fileInputRef.current.value = \"\";\n    }\n    setError(null);\n  }, [previewUrl]);\n\n  useEffect(() => {\n    return () => {\n      if (previewRef.current) {\n        URL.revokeObjectURL(previewRef.current);\n      }\n    };\n  }, []);\n\n  return {\n    previewUrl,\n    fileName,\n    fileInputRef,\n    handleThumbnailClick,\n    handleFileChange,\n    handleRemove,\n    uploading,\n    error,\n  };\n}\n",
      "type": "registry:hook",
      "target": "hooks/use-image-upload.ts"
    },
    {
      "path": "registry/basic/hooks/use-media-querry.ts",
      "content": "import { useState, useEffect } from 'react'\r\n\r\nexport function useMediaQuery(query: string): boolean {\r\n  const [matches, setMatches] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const media = window.matchMedia(query)\r\n    if (media.matches !== matches) {\r\n      setMatches(media.matches)\r\n    }\r\n    const listener = () => setMatches(media.matches)\r\n    window.addEventListener('resize', listener)\r\n    return () => window.removeEventListener('resize', listener)\r\n  }, [matches, query])\r\n\r\n  return matches\r\n}\r\n\r\n",
      "type": "registry:hook",
      "target": "hooks/use-media-querry.ts"
    },
    {
      "path": "registry/basic/lib/content.ts",
      "content": "export const content = `\r\n  <h1>Explore the Tiptap rich text editor with Shadcn UI components 📝</h1>\r\n  <p>This is a powerful editor that supports many features:</p>\r\n  <ul class=\"list-disc\">\r\n      <li>\r\n          <p>\r\n              Rich text formatting with <strong>bold</strong>, <em>italic</em>, and\r\n              <u>underline</u>\r\n          </p>\r\n      </li>\r\n      <li>\r\n          <p>Different heading levels</p>\r\n      </li>\r\n      <li>\r\n          <p>Lists (ordered and unordered)</p>\r\n      </li>\r\n      <li>\r\n          <p>Text alignment options</p>\r\n      </li>\r\n      <li>\r\n          <p>Image uploads and management</p>\r\n      </li>\r\n  </ul>\r\n  <h2>Try It Out!</h2>\r\n  <p>\r\n      Type '/' to see available commands or use the toolbar above to format your\r\n      content.\r\n  </p>\r\n  <img src=\"https://res.cloudinary.com/sham007/image/upload/v1737910103/ProfileImages/724shots_so.jpg\" alt=\"Example image\"\r\n      width=\"100%\" align=\"center\" caption=\"SAAS landing page template\" aspectratio=\"1.640340218712029\" />\r\n  <p>\r\n      You can also add links like\r\n      <a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://ehtisham.vercel.app\">this one</a>\r\n      and use text alignment options.\r\n  </p>\r\n  <pre><code class=\"language-javascript\">// Example code block\r\nconst greeting = \"Hello, World!\";\r\nconsole.log(greeting);</code></pre>\r\n`;\r\n",
      "type": "registry:lib",
      "target": "lib/content.ts"
    },
    {
      "path": "registry/basic/lib/tiptap-utils.ts",
      "content": "import { type Editor } from \"@tiptap/core\";\n\nexport const NODE_HANDLES_SELECTED_STYLE_CLASSNAME =\n  \"node-handles-selected-style\";\n\nexport function isValidUrl(url: string) {\n  return /^https?:\\/\\/\\S+$/.test(url);\n}\n\nexport const duplicateContent = (editor: Editor) => {\n  const { view } = editor;\n  const { state } = view;\n  const { selection } = state;\n\n  editor\n    .chain()\n    .insertContentAt(\n      selection.to,\n      /* eslint-disable */\n      // @ts-nocheck\n      selection.content().content.firstChild?.toJSON(),\n      {\n        updateSelection: true,\n      }\n    )\n    .focus(selection.to)\n    .run();\n};\n\nexport function getUrlFromString(str: string) {\n  if (isValidUrl(str)) {\n    return str;\n  }\n  try {\n    if (str.includes(\".\") && !str.includes(\" \")) {\n      return new URL(`https://${str}`).toString();\n    }\n  } catch {\n    return null;\n  }\n}\n\nexport function absoluteUrl(path: string) {\n  return `${process.env.NEXT_PUBLIC_APP_URL}${path}`;\n}\n",
      "type": "registry:lib",
      "target": "lib/tiptap-utils.ts"
    }
  ]
}